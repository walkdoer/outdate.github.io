<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Code Me]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://zhangmhao.github.io/"/>
  <updated>2015-12-01T13:27:55.000Z</updated>
  <id>http://zhangmhao.github.io/</id>
  
  <author>
    <name><![CDATA[Andrew Zhang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[webpack+babel+react+bootstap]]></title>
    <link href="http://zhangmhao.github.io/2015/12/01/webpack-babel-react-bootstap/"/>
    <id>http://zhangmhao.github.io/2015/12/01/webpack-babel-react-bootstap/</id>
    <published>2015-12-01T12:48:09.000Z</published>
    <updated>2015-12-01T13:27:55.000Z</updated>
    <content type="html"><![CDATA[<p>使用gulp + browserify的开发流已经有一段时间了，依旧存在一些痛点，虽然可以通过编写或者引入插件来解决。但感觉不是一个系统的解决方案。在了解了<a href="https://webpack.github.io/" target="_blank" rel="external">webpack</a>的一些功能之后，决定在近期的一个项目里面来应用，学习一下其对开发模式的改进。</p>
<h2 id="安装webpack">安装webpack</h2><p>安装 <code>webpack</code> 和 <code>webpack-dev-server</code> 到本地和全局中</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> webpack -<span class="keyword">g</span></span><br><span class="line">npm <span class="keyword">install</span> webpack <span class="comment">--save-dev</span></span><br><span class="line">npm <span class="keyword">install</span> webpack-dev-<span class="keyword">server</span> -<span class="keyword">g</span></span><br><span class="line">npm <span class="keyword">install</span> webpack-dev-<span class="keyword">server</span> <span class="comment">--save-dev</span></span></span><br></pre></td></tr></table></figure>
<h2 id="安装开发依赖">安装开发依赖</h2><p>webpack需要用到的loader</p>
<p>由于想要使用ES6的语法，所以需要引入 <code>babel-loader</code>, 还有其他的如 <code>less-loader</code>, <code>css-loader</code>, <code>url-loader</code>, <code>style-loader</code>, <code>file-loader</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> babel-loader <span class="keyword">less</span>-loader css-loader <span class="keyword">url</span>-loader <span class="keyword">style</span>-loader  <span class="keyword">file</span>-loader <span class="comment">--save-dev</span></span></span><br></pre></td></tr></table></figure>
<p>而babel-loader还需要一些依赖, 用于解析ES6和React的jsx语法</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">npm</span> install <span class="keyword">babel-core, </span><span class="keyword">babel-preset-es2015, </span><span class="keyword">babel-preset-react, </span><span class="keyword">babel-preset-stage-0 </span>--save-dev</span><br></pre></td></tr></table></figure>
<h2 id="安装React_和_Bootstrap">安装React 和 Bootstrap</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> react react-dom <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> bootstrap <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure>
<h2 id="编写webpack-config-js文件">编写webpack.config.js文件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> DEBUG = !includes(process.argv, <span class="string">'--release'</span>);</span><br><span class="line"><span class="keyword">var</span> WATCH = global.WATCH === <span class="literal">undefined</span> ? <span class="literal">false</span> : global.WATCH;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> plugins = [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.OccurenceOrderPlugin()</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (WATCH) &#123;</span><br><span class="line">    plugins.push([</span><br><span class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">        <span class="keyword">new</span> webpack.NoErrorsPlugin()</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: [<span class="string">"./src/app.jsx"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">"build"</span>),</span><br><span class="line">        publicPath: <span class="string">"/build/"</span>,</span><br><span class="line">        filename: <span class="string">"bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    cache: DEBUG,</span><br><span class="line">    debug: DEBUG,</span><br><span class="line">    devtool: DEBUG ? <span class="string">'cheap-module-eval-source-map'</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">                loader: <span class="string">"style!css!less"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>, loader: <span class="string">"style!css"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">                loader: <span class="string">'babel'</span>,</span><br><span class="line">                query: &#123;</span><br><span class="line">                    presets: [<span class="string">'es2015'</span>, <span class="string">"stage-0"</span>, <span class="string">'react'</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">/*加载图片*/</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|jpg|jpeg|gif|svg|woff|woff2)$/</span>,</span><br><span class="line">                loader: <span class="string">'url-loader?limit=10000'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">/*加载字体文件  bootstape有用到字体文件 ，所以通过url-loader来加载*/</span></span><br><span class="line">            &#123; test: <span class="regexp">/\.woff(\?v=\d+\.\d+\.\d+)?$/</span>,   loader: <span class="string">"url?limit=10000&amp;mimetype=application/font-woff"</span> &#125;,</span><br><span class="line">            &#123; test: <span class="regexp">/\.ttf(\?v=\d+\.\d+\.\d+)?$/</span>,    loader: <span class="string">"url?limit=10000&amp;mimetype=application/octet-stream"</span> &#125;,</span><br><span class="line">            &#123; test: <span class="regexp">/\.eot(\?v=\d+\.\d+\.\d+)?$/</span>,    loader: <span class="string">"file"</span> &#125;,</span><br><span class="line">            &#123; test: <span class="regexp">/\.svg(\?v=\d+\.\d+\.\d+)?$/</span>,    loader: <span class="string">"url?limit=10000&amp;mimetype=image/svg+xml"</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.jsx'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: plugins</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">includes</span>(<span class="params">arr, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.some(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val === target;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="引入Bootstrap">引入Bootstrap</h2><p>引入bootstrap有多种方式</p>
<h4 id="第一种：使用bootsrape，可以直接加载less模块">第一种：使用bootsrape，可以直接加载less模块</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'bootstrap/less/bootstrape.less'</span></span><br></pre></td></tr></table></figure>
<h4 id="第二种：_可以加载已经构建完成的">第二种： 可以加载已经构建完成的</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"bootstrap/dist/css/bootstrap.css"</span>;</span><br></pre></td></tr></table></figure>
<h4 id="第三种:_在入口的less文件中引用">第三种: 在入口的less文件中引用</h4><p>例如我的样式入口文件是 <code>app.less</code>; 注意，如果入口是<code>css</code>文件，加载会出错, 报<code>Module build failed: CssSyntaxError</code>，估计这个css-loader和less-loader协作上的问题，不过只要不是css文件，是可以规避的。</p>
<p>app.less<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="markdown">/<span class="emphasis">** 添加bootstrap依赖 *</span>/</span></span></span><br><span class="line"><span class="annotation">@import</span> <span class="string">"~bootstrap/less/bootstrap.less"</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>使用gulp + browserify的开发流已经有一段时间了，依旧存在一些痛点，虽然可以通过编写或者引入插件来解决。但感觉不是一个系统的解决方案。在了解了<a href="https://webpack.github.io/" target="_blank" rel="e]]>
    </summary>
    
      <category term="react" scheme="http://zhangmhao.github.io/tags/react/"/>
    
      <category term="构建工具" scheme="http://zhangmhao.github.io/tags/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[寻找相似图片算法]]></title>
    <link href="http://zhangmhao.github.io/2015/11/16/find-similar-picture/"/>
    <id>http://zhangmhao.github.io/2015/11/16/find-similar-picture/</id>
    <published>2015-11-16T07:14:27.000Z</published>
    <updated>2015-11-18T07:11:04.000Z</updated>
    <content type="html"><![CDATA[<p>根据阮一峰的<a href="http://www.ruanyifeng.com/blog/2011/07/principle_of_similar_image_search.html" target="_blank" rel="external">博文</a>实现一个js版本, 步骤如下:</p>
<ol>
<li>将图片缩小到8x8的尺寸</li>
<li>转化为64灰度级</li>
<li>计算所有64个像素的灰度平均值</li>
<li>比较像素的灰度, 大于或等于平均值，记为1；小于平均值，记为0。</li>
<li>计算哈希值</li>
</ol>
<p>更加详细的步骤参考作者<a href="http://www.ruanyifeng.com/blog/2011/07/principle_of_similar_image_search.html" target="_blank" rel="external">原文</a></p>
<p>实现这个功能的过程中，会涉及到图片的缩放，将图片转化为灰度图, 以及生成图片hash，计算汉明距离等细节点。在实现的时候通过对canvas的操作来处理图片</p>
<p><strong>图片缩放</strong></p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function resize2Canvas(img, <span class="variable">width</span>, <span class="variable">height</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!img || !<span class="variable">width</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> img;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">height</span> = <span class="variable">height</span> || <span class="variable">width</span>;</span><br><span class="line">    <span class="comment">// 按原图缩放</span></span><br><span class="line">    var detImg = img.<span class="variable">width</span> / img.<span class="variable">height</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">width</span> / <span class="variable">height</span> &gt; detImg) &#123;</span><br><span class="line">        <span class="variable">height</span> = <span class="variable">width</span> / detImg;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">width</span> = <span class="variable">height</span> * detImg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 画到 canvas 中</span></span><br><span class="line">    var canvas = document.createElement(<span class="string">'canvas'</span>);</span><br><span class="line">    canvas.<span class="variable">width</span> = <span class="variable">width</span>;</span><br><span class="line">    canvas.<span class="variable">height</span> = <span class="variable">height</span>;</span><br><span class="line">    var ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">    ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, <span class="variable">width</span>, <span class="variable">height</span>);</span><br><span class="line">    <span class="keyword">return</span> canvas;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>转化图片为灰度图</strong></p>
<p>转换的算法为: <code>Y =0.299 * R + 0.587 * G + 0.114 * B</code></p>
<p>更多细节参考<a href="http://www.w3.org/TR/AERT#color-contrast" target="_blank" rel="external">color-contrast</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">grayscaleCanvas</span>(<span class="params">canvas</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvasContext = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">    <span class="keyword">var</span> cWidth = canvas.width;</span><br><span class="line">    <span class="keyword">var</span> cHeight = canvas.height;</span><br><span class="line">    <span class="keyword">var</span> canvasData = canvasContext.getImageData(<span class="number">0</span>, <span class="number">0</span>, cWidth, cHeight);</span><br><span class="line">    <span class="keyword">var</span> canvasDataWidth = canvasData.width;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; cWidth; x++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> y = <span class="number">0</span>; y &lt; cHeight; y++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Index of the pixel in the array</span></span><br><span class="line">            <span class="keyword">var</span> idx = (x + y * canvasDataWidth) * <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">var</span> r = canvasData.data[idx + <span class="number">0</span>];</span><br><span class="line">            <span class="keyword">var</span> g = canvasData.data[idx + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">var</span> b = canvasData.data[idx + <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// calculate gray scale value</span></span><br><span class="line">            <span class="keyword">var</span> gray = <span class="built_in">Math</span>.ceil((<span class="number">0.299</span> * r + <span class="number">0.587</span> * g + <span class="number">0.114</span> * b) / <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// assign gray scale value</span></span><br><span class="line">            canvasData.data[idx + <span class="number">0</span>] = gray; <span class="comment">// Red channel</span></span><br><span class="line">            canvasData.data[idx + <span class="number">1</span>] = gray; <span class="comment">// Green channel</span></span><br><span class="line">            canvasData.data[idx + <span class="number">2</span>] = gray; <span class="comment">// Blue channel</span></span><br><span class="line">            canvasData.data[idx + <span class="number">3</span>] = <span class="number">255</span>; <span class="comment">// Alpha channel</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    canvasContext.putImageData(canvasData, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> canvasData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>计算图片的hash值，并计算其汉明距离</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> + 计算图片的hash值</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hash</span><span class="params">(img)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> size = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">var</span> resizedCanvas = resize2Canvas(img, size, size, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">var</span> canvasData = grayscaleCanvas(resizedCanvas);</span><br><span class="line">    <span class="keyword">var</span> cW = canvasData.width,</span><br><span class="line">        cH = canvasData.height;</span><br><span class="line">    <span class="keyword">var</span> totalGray = <span class="number">0</span>,</span><br><span class="line">        x, y, idx, grayValue;</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; cW; x++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; cH; y++) &#123;</span><br><span class="line">            <span class="comment">// Index of the pixel in the array</span></span><br><span class="line">            idx = (x + y * cW) * <span class="number">4</span>;</span><br><span class="line">            grayValue = canvasData.data[idx];</span><br><span class="line">            totalGray += grayValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> meanGray = totalGray / (size * size);</span><br><span class="line">    <span class="keyword">var</span> val;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">array</span> = [];</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; x &lt; cW; x++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (y = <span class="number">0</span>; y &lt; cH; y++) &#123;</span><br><span class="line">            <span class="comment">// Index of the pixel in the array</span></span><br><span class="line">            idx = (x + y * cW) * <span class="number">4</span>;</span><br><span class="line">            grayValue = canvasData.data[idx];</span><br><span class="line">            <span class="keyword">if</span> (grayValue &gt;= meanGray) &#123;</span><br><span class="line">                val = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                val = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">array</span>.push(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> parseInt(<span class="keyword">array</span>.join(<span class="string">''</span>), <span class="number">2</span>).toString(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 计算汉明距离</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hamming</span><span class="params">(h1, h2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> h1a = hashToBinaryArray(h1);</span><br><span class="line">    <span class="keyword">var</span> h2a = hashToBinaryArray(h2);</span><br><span class="line">    <span class="keyword">var</span> diff = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; h1a.length; i++) &#123;</span><br><span class="line">        diff += h1a[i] ^ h2a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> diff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> + 将16进制的图片hash转化为二进制</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hashToBinaryArray</span><span class="params">(h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> parseInt(h, <span class="number">16</span>).toString(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完整的代码请查看 <a href="https://github.com/zhangmhao/front-end-playground/tree/master/frontend/find-similar-picture" target="_blank" rel="external">front-end-playground/frontend/find-similar-picture</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>根据阮一峰的<a href="http://www.ruanyifeng.com/blog/2011/07/principle_of_similar_image_search.html" target="_blank" rel="external">博文</a>实现一个js]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Haskell入门笔记]]></title>
    <link href="http://zhangmhao.github.io/2015/06/04/Haskell%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://zhangmhao.github.io/2015/06/04/Haskell入门笔记/</id>
    <published>2015-06-03T16:00:00.000Z</published>
    <updated>2015-09-22T14:10:27.000Z</updated>
    <content type="html"><![CDATA[<p>最近在学习haskell，想要要深入的了解一下函数式编程(functional programming)，朋友建议可以通过学习这一门语言来加深理解。所以就尝试一下。<br><a href="http://learnyouahaskell.com/" target="_blank" rel="external">learnyouahaskell.com</a>是一个非常不错的入门教程，适合有一定的编程基础的人阅读。电子版可以免费在线阅读</p>
<h3 id="String">String</h3><p><code>&#39;&#39;</code> 和 <code>&quot;</code>的区别</p>
<h3 id="List">List</h3><p>字符串也是List，List的拼接可以使用 <code>++</code></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] ++ [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]  </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]  </span><br><span class="line">ghci&gt; <span class="string">"hello"</span> ++ <span class="string">" "</span> ++ <span class="string">"world"</span>  </span><br><span class="line"><span class="string">"hello world"</span>  </span><br><span class="line">ghci&gt; [<span class="string">'w'</span>,<span class="string">'o'</span>] ++ [<span class="string">'o'</span>,<span class="string">'t'</span>]  </span><br><span class="line"><span class="string">"woot"</span></span><br></pre></td></tr></table></figure>
<p>高效率的拼接 使用操作符<code>:</code></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; <span class="string">'A'</span>:<span class="string">" SMALL CAT"</span>  </span><br><span class="line"><span class="string">"A SMALL CAT"</span>  </span><br><span class="line">ghci&gt; <span class="number">5</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]  </span><br><span class="line">[<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p><code>!!</code> 根据索引值取List元素， 索引值从0开始</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*Main&gt; <span class="string">"hello world"</span>!!<span class="number">0</span></span><br><span class="line"><span class="string">'h'</span></span><br><span class="line">*Main&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]!!<span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>取出大于List长度的会报错</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*Main&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]!!<span class="number">7</span></span><br><span class="line">*** Exception: Prelude.(!!): index too large</span><br></pre></td></tr></table></figure>
<p>List的比较, 比较的方式是  <code>lexicographical order</code></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; [<span class="number">2</span>,<span class="number">1</span>] &gt; [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">True</span><br><span class="line">ghci&gt; [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>] &gt; [<span class="number">2</span>,<span class="number">10</span>,<span class="number">100</span>]  </span><br><span class="line">True  </span><br><span class="line">ghci&gt; [<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>] &gt; [<span class="number">3</span>,<span class="number">4</span>]  </span><br><span class="line">True  </span><br><span class="line">ghci&gt; [<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>] &gt; [<span class="number">2</span>,<span class="number">4</span>]  </span><br><span class="line">True  </span><br><span class="line">ghci&gt; [<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>] == [<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>]  </span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<p>List有一系列的函数可以使用 </p>
<ul>
<li><code>tail</code></li>
<li><code>last</code></li>
<li><code>init</code></li>
<li><code>head</code></li>
<li><code>length</code> 取List的长度 <code>length [5,4,3,2,1] == 5</code></li>
<li><code>null</code> 检查List是否为空 <code>null [] == True</code></li>
<li><code>take</code> 获取从头部开始的n个元素  <code>take 3 [1,2,3,4]</code> 获取到 <code>[1,2,3]</code></li>
<li><code>reverse</code> 翻转数组</li>
<li><code>minimum</code> 最小值</li>
<li><code>maximum</code> 最大值</li>
<li><code>sum</code></li>
<li><code>elem</code> 检查一个元素是否在List中 4 <code>elem</code> [3,4,5,6] == True</li>
</ul>
<p><strong> 注意：这几个函数用于空List的时候会报错 </strong></p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; tail []</span><br><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span> Exception: Prelude.tail: empty list</span><br></pre></td></tr></table></figure>
<h4 id="集合的方式来理解List">集合的方式来理解List</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ghci &gt; [x*<span class="number">2</span> | x &lt;- [<span class="number">1.</span><span class="number">.10</span>]]</span><br><span class="line">[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">ghci&gt; [x*<span class="number">2</span> | x &lt;- [<span class="number">1.</span><span class="number">.10</span>], x*<span class="number">2</span> &gt;= <span class="number">12</span>]</span><br><span class="line">[<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">ghci&gt; [x*<span class="number">2</span>+<span class="number">1</span> | x &lt;- [<span class="number">0.</span><span class="number">.10</span>]]</span><br><span class="line">[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">15</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">21</span>]</span><br><span class="line"></span><br><span class="line">ghci&gt; [ x*y | x &lt;- [<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>], y &lt;- [<span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>]]</span><br><span class="line">[<span class="number">16</span>,<span class="number">20</span>,<span class="number">22</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">55</span>,<span class="number">80</span>,<span class="number">100</span>,<span class="number">110</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//排除 3， 4</span></span><br><span class="line">ghci&gt;  [ x | x &lt;- [<span class="number">1.</span><span class="number">.5</span>], x /= <span class="number">3</span>, x /= <span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//嵌套的处理</span></span><br><span class="line">ghci&gt; let xxs = [[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>]]  </span><br><span class="line">ghci&gt; [ [ x | x &lt;- xs, even x ] | xs &lt;- xxs]  </span><br><span class="line">[[<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">6</span>]]</span><br></pre></td></tr></table></figure>
<h3 id="元组_Tuples">元组 Tuples</h3><p>元组的元素类型可以不一致， 而List是要求元素是同类型的。 例如<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">'Name'</span>, <span class="number">50</span>)</span></span><br></pre></td></tr></table></figure></p>
<p>稍微负责一点的元组<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; [ (a,b,c) | c &lt;- [<span class="number">1.</span><span class="number">.10</span>], b &lt;- [<span class="number">1.</span>.c], a &lt;- [<span class="number">1.</span>.b], a^<span class="number">2</span> + b^<span class="number">2</span> == c^<span class="number">2</span>]</span><br><span class="line">[(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>),(<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>)]</span><br></pre></td></tr></table></figure></p>
<p>元组同样有一系列的函数，常用的有</p>
<p><code>fst</code>,  取出元组首个元素</p>
<p><code>snd</code>  取出元组第二个元素</p>
<p><code>zip</code> 一个非常有用的函数，将两个List的对应元素合并为元组，并构成一个List<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; zip [<span class="number">1</span> .. <span class="number">5</span>] [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>, <span class="string">"five"</span>]</span><br><span class="line">[(<span class="number">1</span>,<span class="string">"one"</span>),(<span class="number">2</span>,<span class="string">"two"</span>),(<span class="number">3</span>,<span class="string">"three"</span>),(<span class="number">4</span>,<span class="string">"four"</span>),(<span class="number">5</span>,<span class="string">"five"</span>)]</span><br></pre></td></tr></table></figure></p>
<h3 id="Type_And_TypeClasses">Type And TypeClasses</h3><h4 id="Type">Type</h4><p>Haskell是一个强类型的语言，有<code>Char</code>, <code>Integer</code>, <code>Int</code>, <code>Float</code>,<code>Double</code>,<code>Bool</code>等基本类型</p>
<h4 id="Typeclasses">Typeclasses</h4><p>类限制 class constraint , <code>=&gt;</code> 这个符号代表类限制<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">ghci&gt; :</span>t (==)  </span><br><span class="line"><span class="label">(==) ::</span> (Eq <span class="literal">a</span>) =&gt; <span class="literal">a</span> -&gt; <span class="literal">a</span> -&gt; Bool</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>the equality function takes any two values that are of the same type and returns a Bool. The type of those two values must be a member of the Eq class (this was the class constraint). 在标准的Haskell中，除了了io和function之外，其他类型都是属于Eq</p>
</blockquote>
<p>Haskell的typeclass有 <code>Eq</code>, <code>Ord</code>, <code>Show</code>,<code>Read</code>,<code>Enum</code>, <code>Bounded</code></p>
<h5 id="Eq"><code>Eq</code></h5><h5 id="Ord"><code>Ord</code></h5><h5 id="Show"><code>Show</code></h5><h5 id="Read"><code>Read</code></h5><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hci&gt; <span class="built_in">read</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">&lt;interactive&gt;:<span class="number">94</span>:<span class="number">6</span>:</span><br><span class="line">    Could <span class="operator">not</span> deduce (Num String) arising <span class="built_in">from</span> <span class="operator">the</span> literal ‘<span class="number">4</span>’</span><br><span class="line">    <span class="built_in">from</span> <span class="operator">the</span> context (Read <span class="operator">a</span>)</span><br><span class="line">      bound <span class="keyword">by</span> <span class="operator">the</span> inferred type <span class="operator">of</span> <span class="keyword">it</span> :: Read <span class="operator">a</span> =&gt; <span class="operator">a</span></span><br><span class="line">      <span class="keyword">at</span> &lt;interactive&gt;:<span class="number">94</span>:<span class="number">1</span>-<span class="number">6</span></span><br><span class="line">    In <span class="operator">the</span> <span class="keyword">first</span> argument <span class="operator">of</span> ‘<span class="built_in">read</span>’, namely ‘<span class="number">4</span>’</span><br><span class="line">    In <span class="operator">the</span> expression: <span class="built_in">read</span> <span class="number">4</span></span><br><span class="line">    In <span class="operator">an</span> equation <span class="keyword">for</span> ‘<span class="keyword">it</span>’: <span class="keyword">it</span> = <span class="built_in">read</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>需要使用类型声明 (type annotations)，Haskell才有办法正确的解析，或者是在表达式中，Haskell自己进行推断</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; read <span class="string">"4"</span> :: Int</span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br><span class="line">ghci&gt; read <span class="string">"[1,2,3,4]"</span> :: [Int]  </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]  </span><br><span class="line"></span><br><span class="line">ghci&gt; <span class="number">10</span> + read <span class="string">"5"</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"></span><br><span class="line">ghci&gt; read <span class="string">"[1,2]"</span> ++ [<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">ghci&gt; read <span class="string">"(1, '2')"</span> :: (Int, Char)</span><br><span class="line">(<span class="number">1</span>,<span class="string">'2'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Syntax_in_Functions">Syntax in Functions</h3><h4 id="Pattern_Matching">Pattern Matching</h4><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">lucky ::</span> (Integral <span class="literal">a</span>) =&gt; <span class="literal">a</span> -&gt; String  </span><br><span class="line">lucky <span class="number">7</span> = <span class="string">"LUCKY NUMBER SEVEN!"</span>  </span><br><span class="line">lucky x = <span class="string">"Sorry, you're out of luck, pal!"</span></span><br></pre></td></tr></table></figure>
<p>如果输入值是7，match到第一个pattern，不是7，那么就会match到第二个pattern。所以，在定义pattern的时候，次序是很重要的，先定义特例pattern，在定义普遍的pattern</p>
<p>再看下面这个例子，</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">factorial ::</span> (Integral <span class="literal">a</span>) =&gt; <span class="literal">a</span> -&gt; <span class="literal">a</span>  </span><br><span class="line">factorial <span class="number">0</span> = <span class="number">1</span>  </span><br><span class="line">factorial n = n * factorial (n - <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><strong>The x:xs pattern </strong></p>
<figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">head' :: [a] -&gt; a  </span><br><span class="line">head' <span class="literal">[]</span> = error <span class="string">"Can't call head on an empty list, dummy!"</span>  </span><br><span class="line">head' (x:_) = x</span><br></pre></td></tr></table></figure>
<p><strong>xs@(x:y:ys) </strong> <code>@</code>符号 表示 xs 代表的就是 (x:y:ys), 这样可以写起来更加简单一些。</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">capital <span class="tag">:: String</span> <span class="subst">-&gt; </span><span class="built_in">String</span>  </span><br><span class="line">capital <span class="string">""</span> = <span class="string">"Empty string, whoops!"</span>  </span><br><span class="line">capital <span class="literal">all</span>@(x:xs) = <span class="string">"The first letter of "</span> ++ <span class="literal">all</span> ++ <span class="string">" is "</span> ++ <span class="preprocessor">[</span>x<span class="preprocessor">]</span><span class="markup"></span></span><br></pre></td></tr></table></figure>
<h4 id="Gurard">Gurard</h4><p>看完下面这个例子，基本就可以理解Guard是怎么工作的。不需要介绍太多。需要的注意的是 where里面定义的变量只对于该函数有作用。</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bmiTell :: (RealFloat <span class="operator">a</span>) =&gt; <span class="operator">a</span> -&gt; <span class="operator">a</span> -&gt; String  </span><br><span class="line">bmiTell weight height  </span><br><span class="line">    | bmi &lt;= skinny = <span class="string">"You're underweight, you emo, you!"</span>  </span><br><span class="line">    | bmi &lt;= <span class="keyword">normal</span> = <span class="string">"You're supposedly normal. Pffft, I bet you're ugly!"</span>  </span><br><span class="line">    | bmi &lt;= fat    = <span class="string">"You're fat! Lose some weight, fatty!"</span>  </span><br><span class="line">    | otherwise     = <span class="string">"You're a whale, congratulations!"</span>  </span><br><span class="line">    where bmi = weight / height ^ <span class="number">2</span>  </span><br><span class="line">          skinny = <span class="number">18.5</span>  </span><br><span class="line">          <span class="keyword">normal</span> = <span class="number">25.0</span>  </span><br><span class="line">          fat = <span class="number">30.0</span></span><br></pre></td></tr></table></figure>
<p>还可以类似于下面用3元组的方式</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...  </span><br><span class="line">where bmi = weight / height ^ <span class="number">2</span>  </span><br><span class="line">      (skinny, normal, fat) = (<span class="number">18.5</span>, <span class="number">25.0</span>, <span class="number">30.0</span>)</span><br></pre></td></tr></table></figure>
<h4 id="let_&lt;bindings&gt;_in_&lt;expression&gt;"><code>let &lt;bindings&gt; in &lt;expression&gt;</code></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; <span class="number">4</span> * (let a = <span class="number">9</span> in a + <span class="number">1</span>) + <span class="number">2</span>  </span><br><span class="line"><span class="number">42</span></span><br></pre></td></tr></table></figure>
<p> introduce functions in a local scope:</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; [<span class="built_in">let</span> <span class="built_in">square</span> x = x <span class="built_in">*</span> x in (<span class="built_in">square</span> <span class="number">5</span>, <span class="built_in">square</span> <span class="number">3</span>, <span class="built_in">square</span> <span class="number">2</span>)]  </span><br><span class="line">[(<span class="number">25</span>,<span class="number">9</span>,<span class="number">4</span>)]</span><br></pre></td></tr></table></figure>
<p>多个表达式用分号隔开</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; (<span class="keyword">let</span> a = <span class="number">100</span>; b = <span class="number">200</span>; <span class="built_in">c</span> = <span class="number">300</span> <span class="keyword">in</span> a*b*<span class="built_in">c</span>, <span class="keyword">let</span> foo=<span class="string">"Hey "</span>; bar = <span class="string">"there!"</span> <span class="keyword">in</span> foo ++ bar)  </span><br><span class="line">(<span class="number">6000000</span>,<span class="string">"Hey there!"</span>)</span><br></pre></td></tr></table></figure>
<p>使用let和List Comprehension来对bmi的例子进行改写, 注意，在List Comprehension中使用时，<code>in</code>是可以省略的，因为名字的可见性已经提前定义好了。</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">calcBmis :: <span class="comment">(RealFloat a)</span> =&gt; [<span class="comment">(a, a)</span>] -&gt; [a]  </span><br><span class="line">calcBmis xs = [bmi | <span class="comment">(w, h)</span> &lt;- xs, let bmi = w / h ^ <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p>如果不使用in来限定范围，则是全局可见的</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; let zoot x y z = x * y + z  </span><br><span class="line">ghci&gt; zoot <span class="number">3</span> <span class="number">9</span> <span class="number">2</span>  </span><br><span class="line"><span class="number">29</span>  </span><br><span class="line">ghci&gt; let boot x y z = x * y + z in boot <span class="number">3</span> <span class="number">4</span> <span class="number">2</span>  </span><br><span class="line"><span class="number">14</span>  </span><br><span class="line">ghci&gt; boot  </span><br><span class="line">&lt;interactive&gt;:<span class="number">1</span>:<span class="number">0</span>: Not in scope: `boot'</span><br></pre></td></tr></table></figure>
<h4 id="case">case</h4><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> expression <span class="keyword">of</span> pattern -&gt; <span class="literal">result</span>  </span><br><span class="line">                   pattern -&gt; <span class="literal">result</span>  </span><br><span class="line">                   pattern -&gt; <span class="literal">result</span>  </span><br><span class="line">                   ...</span><br></pre></td></tr></table></figure>
<p>这一段表达式其实是case的一个语法糖</p>
<figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">head' :: [a] -&gt; a  </span><br><span class="line">head' <span class="literal">[]</span> = error <span class="string">"No head for empty lists!"</span>  </span><br><span class="line">head' (x:_) = x</span><br></pre></td></tr></table></figure>
<p>如果不使用语法糖，则是</p>
<figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">head' :: [a] -&gt; a  </span><br><span class="line">head' xs = <span class="keyword">case</span> xs <span class="keyword">of</span> <span class="literal">[]</span> -&gt; error <span class="string">"No head for empty lists!"</span>  </span><br><span class="line">                      (x:_) -&gt; x</span><br></pre></td></tr></table></figure>
<h3 id="Higher_order_functions">Higher order functions</h3><p>haskell，函数可以作为参数，也可以作为返回值</p>
<h4 id="Curried_functions">Curried functions</h4><p>之前在js中就比较熟悉这个用法，所以接受起来很简单，不过haskell比javascript的定义方式优雅太多了。以haskell中的<code>max</code>函数为例.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; max <span class="number">4</span> <span class="number">5</span>  </span><br><span class="line"><span class="number">5</span>  </span><br><span class="line">ghci&gt; (max <span class="number">4</span>) <span class="number">5</span>  </span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure></p>
<p>max函数的定义的定义是 <code>max :: (Ord a) =&gt; a -&gt; a -&gt; a</code></p>
<blockquote>
<p>That can also be written as <code>max :: (Ord a) =&gt; a -&gt; (a -&gt; a)</code>. That could be read as: <code>max</code> takes an <code>a</code> and returns (that’s the <code>-&gt;</code>) a function that takes an <code>a</code> and returns an <code>a</code>. That’s why the return type and the parameters of functions are all simply separated with arrows.</p>
</blockquote>
<p>举一个例子来看看这种定义方式的强大之处</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">multThree ::</span> (Num <span class="literal">a</span>) =&gt; <span class="literal">a</span> -&gt; <span class="literal">a</span> -&gt; <span class="literal">a</span> -&gt; <span class="literal">a</span>  </span><br><span class="line">multThree x y z = x * y * z</span><br></pre></td></tr></table></figure>
<p>运行一下看看</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; let multTwoWith9 = multThree <span class="number">9</span></span><br><span class="line">ghci&gt; multTwoWith9 <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">54</span></span><br></pre></td></tr></table></figure>
<p>在举一个例子：</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">compareWithHundred ::</span> (Num <span class="literal">a</span>, Ord <span class="literal">a</span>) =&gt; <span class="literal">a</span> -&gt; Ordering  </span><br><span class="line">compareWithHundred = compare <span class="number">100</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Compare has a type of <code>(Ord a) =&gt; a -&gt; (a -&gt; Ordering)</code> and calling it with 100 returns a<code>(Num a, Ord a) =&gt; a -&gt; Ordering</code>.</p>
</blockquote>
<p>一个我第一次看稍难理解的一个例子</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">applyTwice :: (<span class="tag">a</span> -&gt; a) -&gt; <span class="tag">a</span> -&gt; <span class="tag">a</span>  </span><br><span class="line">applyTwice f x = f (f x)</span><br></pre></td></tr></table></figure>
<p>运行</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; applyTwice (+<span class="number">3</span>) <span class="number">10</span>  </span><br><span class="line"><span class="number">16</span>  </span><br><span class="line">ghci&gt; applyTwice (++ <span class="string">" HAHA"</span>) <span class="string">"HEY"</span>  </span><br><span class="line"><span class="string">"HEY HAHA HAHA"</span>  </span><br><span class="line">ghci&gt; applyTwice (<span class="string">"HAHA "</span> ++) <span class="string">"HEY"</span>  </span><br><span class="line"><span class="string">"HAHA HAHA HEY"</span>  </span><br><span class="line">ghci&gt; applyTwice (multThree <span class="number">2</span> <span class="number">2</span>) <span class="number">9</span>  </span><br><span class="line"><span class="number">144</span>  </span><br><span class="line">ghci&gt; applyTwice (<span class="number">3</span>:) [<span class="number">1</span>]  </span><br><span class="line">[<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p><code>zipwith</code></p>
<figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zipWith' :: (a -&gt; b -&gt; c) -&gt; [a] -&gt; [b] -&gt; [c]  </span><br><span class="line">zipWith' _ <span class="literal">[]</span> _ = <span class="literal">[]</span>  </span><br><span class="line">zipWith' _ _ <span class="literal">[]</span> = <span class="literal">[]</span>  </span><br><span class="line">zipWith' f (x:xs) (y:ys) = f x y : zipWith' f xs ys</span><br></pre></td></tr></table></figure>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; zipWith' (+) <span class="comment">[4,2,5,6]</span> <span class="comment">[2,6,2,3]</span>  </span><br><span class="line"><span class="comment">[6,8,7,9]</span>  </span><br><span class="line">ghci&gt; zipWith' max <span class="comment">[6,3,2,1]</span> <span class="comment">[7,3,1,5]</span>  </span><br><span class="line"><span class="comment">[7,3,2,5]</span>  </span><br><span class="line">ghci&gt; zipWith' (++) <span class="comment">["foo ", "bar ", "baz "]</span> <span class="comment">["fighters", "hoppers", "aldrin"]</span>  </span><br><span class="line"><span class="comment">["foo fighters","bar hoppers","baz aldrin"]</span>  </span><br><span class="line">ghci&gt; zipWith' (*) (replicate 5 2) <span class="comment">[1..]</span>  </span><br><span class="line"><span class="comment">[2,4,6,8,10]</span>  </span><br><span class="line">ghci&gt; zipWith' (zipWith' (*)) <span class="comment">[<span class="comment">[1,2,3]</span>,<span class="comment">[3,5,6]</span>,<span class="comment">[2,3,4]</span>]</span> <span class="comment">[<span class="comment">[3,2,2]</span>,<span class="comment">[3,4,5]</span>,<span class="comment">[5,4,3]</span>]</span>  </span><br><span class="line"><span class="comment">[<span class="comment">[3,4,6]</span>,<span class="comment">[9,20,30]</span>,<span class="comment">[10,12,12]</span>]</span></span><br></pre></td></tr></table></figure>
<p><code>filter</code></p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">filter</span> :: (<span class="operator">a</span> -&gt; Bool) -&gt; [<span class="operator">a</span>] -&gt; [<span class="operator">a</span>]  </span><br><span class="line"><span class="built_in">filter</span> _ [] = []  </span><br><span class="line"><span class="built_in">filter</span> p (x:xs)   </span><br><span class="line">    | p x       = x : <span class="built_in">filter</span> p xs  </span><br><span class="line">    | otherwise = <span class="built_in">filter</span> p xs</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; filter (&gt;<span class="number">3</span>) [<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </span><br><span class="line">[<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>]  </span><br><span class="line">ghci&gt; filter (==<span class="number">3</span>) [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]  </span><br><span class="line">[<span class="number">3</span>]  </span><br><span class="line">ghci&gt; filter even [<span class="number">1.</span><span class="number">.10</span>]  </span><br><span class="line">[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]  </span><br><span class="line">ghci&gt; let notNull x = not (null x) in filter notNull [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">2</span>],[],[],[]]  </span><br><span class="line">[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">2</span>]]  </span><br><span class="line">ghci&gt; filter (`elem` [<span class="string">'a'</span>..<span class="string">'z'</span>]) <span class="string">"u LaUgH aT mE BeCaUsE I aM diFfeRent"</span>  </span><br><span class="line"><span class="string">"uagameasadifeent"</span>  </span><br><span class="line">ghci&gt; filter (`elem` [<span class="string">'A'</span>..<span class="string">'Z'</span>]) <span class="string">"i lauGh At You BecAuse u r aLL the Same"</span>  </span><br><span class="line"><span class="string">"GAYBALLS"</span></span><br></pre></td></tr></table></figure>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; sum <span class="list">(<span class="keyword">takeWhile</span> <span class="list">(<span class="keyword">&lt;10000</span>)</span> <span class="list">(<span class="keyword">filter</span> odd <span class="list">(<span class="keyword">map</span> <span class="list">(^<span class="number">2</span>)</span> [<span class="number">1</span>..])</span>)</span>)</span></span><br></pre></td></tr></table></figure>
<p>list comprehesion vs filter</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; [n | n &lt;- [<span class="number">1.</span><span class="number">.10</span>], odd n]</span><br><span class="line">[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">ghci&gt; filter odd [<span class="number">1.</span><span class="number">.10</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br></pre></td></tr></table></figure>
<p>chain数列</p>
<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">chain ::</span> (Integral <span class="literal">a</span>) =&gt; <span class="literal">a</span> -&gt; [<span class="literal">a</span>]</span><br><span class="line">chain <span class="number">1</span> = [<span class="number">1</span>]</span><br><span class="line">chain n</span><br><span class="line"><span class="label">    | even n = n:</span>chain (n <span class="escape">`d</span>iv<span class="escape">` </span><span class="number">2</span>)</span><br><span class="line"><span class="label">    | odd n  = n:</span>chain (n * <span class="number">3</span> + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="label">numLongChains ::</span> Int</span><br><span class="line">numLongChains = length (filter isLong (map chain [<span class="number">1</span>..<span class="number">100</span>]))</span><br><span class="line">    where isLong xs = length xs &gt; <span class="number">15</span></span><br></pre></td></tr></table></figure>
<h4 id="Lambdas">Lambdas</h4><p>使用符号<code>\</code>来表示，代表这是一个匿名函数，一次性使用。</p>
<p>将前面提及的<code>numLongChains</code>函数进行改写  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">numLongChains :: Int  </span><br><span class="line">numLongChains = length (filter (\xs -&gt; length xs &gt; <span class="number">15</span>) (<span class="built_in">map</span> chain [<span class="number">1.</span><span class="number">.100</span>]))</span><br></pre></td></tr></table></figure>
<p>其中 <code>(\xs -&gt; length xs &gt; 15)</code> 就是lambdas</p>
<p>下面我们看使用 partial 和 lambda的对比</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; <span class="built_in">map</span> (+<span class="number">3</span>) [<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">[<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line">ghci&gt; <span class="built_in">map</span> (\x -&gt; x +<span class="number">3</span>) [<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">[<span class="number">4</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line">ghci&gt;</span><br></pre></td></tr></table></figure>
<p>在这个例子中，partial会是一个更好的选择。可读性更高</p>
<p>更多例子</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; zipWith (\a b -&gt; (a * <span class="number">30</span> + <span class="number">3</span>) / b) [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>] [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">[<span class="number">153.0</span>,<span class="number">61.5</span>,<span class="number">31.0</span>,<span class="number">15.75</span>,<span class="number">6.6</span>]</span><br><span class="line">ghci&gt; <span class="built_in">map</span> (\(a,b)-&gt; a+b) [(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">3</span>,<span class="number">4</span>)]</span><br><span class="line">[<span class="number">3</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure>
<p><strong>fold up list <code>foldl</code></strong> </p>
<blockquote>
<p>Folds can be used to implement any function where you traverse a list once, element by element, and then return something based on that. Whenever you want to traverse a list to return something, chances are you want a fold. </p>
</blockquote>
<p>使用<code>foldl</code>对sum函数重新改写</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sum' :: (<span class="type">Num</span> a) =&gt; [a] -&gt; a  </span><br><span class="line">sum' xs = foldl (\acc x -&gt; acc + x) <span class="number">0</span> xs</span><br></pre></td></tr></table></figure>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; sum' <span class="string">[3,5,2,1]</span></span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure>
<p>acc   x<br>0     3<br>3     5<br>8     2<br>10   1<br>11</p>
<p>更简洁的写法</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sum<span class="comment">' :: (Num a) =&gt; [a] -&gt; a  </span></span><br><span class="line">sum<span class="comment">' = foldl (+) 0</span></span><br></pre></td></tr></table></figure>
<p>其中可以改写为这样子的形式有一个原因就是在haskell中 <code>foo a = bar b a</code> 可以简写为 <code>foo = bar b</code><br>上例中就是 <code>sum&#39; xs = foldl (+) 0 xs</code> 的简写</p>
<p>另外一个例子，使用 foldl来实现 elem 函数</p>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">elem' :: (<span class="type">Eq</span> a) =&gt; a -&gt; [a] -&gt; <span class="type">Bool</span>  </span><br><span class="line">elem' y ys = foldl (\acc x -&gt; <span class="keyword">if</span> x == y <span class="keyword">then</span> <span class="type">True</span> <span class="keyword">else</span> acc) <span class="type">False</span> ys</span><br></pre></td></tr></table></figure>
<p>acc的初始值是<code>False</code>，也就是不存在，如果x等于y就返回 True，不等于就保持acc</p>
<p>fold是非常强大的，书中重新实现了许多基础函数</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">maximum<span class="comment">' :: (Ord a) =&gt; [a] -&gt; a  </span></span><br><span class="line">maximum<span class="comment">' = foldr1 (\x acc -&gt; if x &gt; acc then x else acc)  </span></span><br><span class="line">  </span><br><span class="line">reverse<span class="comment">' :: [a] -&gt; [a]  </span></span><br><span class="line">reverse<span class="comment">' = foldl (\acc x -&gt; x : acc) []  </span></span><br><span class="line">  </span><br><span class="line">product<span class="comment">' :: (Num a) =&gt; [a] -&gt; a  </span></span><br><span class="line">product<span class="comment">' = foldr1 (*)  </span></span><br><span class="line">  </span><br><span class="line">filter<span class="comment">' :: (a -&gt; Bool) -&gt; [a] -&gt; [a] </span></span><br><span class="line">filter<span class="comment">' p = foldr (\x acc -&gt; if p x then x : acc else acc) []  </span></span><br><span class="line">  </span><br><span class="line">head<span class="comment">' :: [a] -&gt; a  </span></span><br><span class="line">head<span class="comment">' = foldr1 (\x _ -&gt; x)  </span></span><br><span class="line">  </span><br><span class="line">last<span class="comment">' :: [a] -&gt; a  </span></span><br><span class="line">last<span class="comment">' = foldl1 (\_ x -&gt; x)</span></span><br></pre></td></tr></table></figure>
<p>head的实现最好还是之前用的pattern match，这里只是为了举例</p>
<p><code>scanl</code> 和 <code>scanr</code> 与 <code>foldl</code> 和<code>foldr</code>是相似的，只是scan会输出每一个阶段的累计值</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; scanl (+) <span class="number">0</span> [<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>]  </span><br><span class="line">[<span class="number">0</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>]  </span><br><span class="line">ghci&gt; scanr (+) <span class="number">0</span> [<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>]  </span><br><span class="line">[<span class="number">11</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">ghci&gt; scanl1 (\acc x -&gt; <span class="keyword">if</span> x &gt; acc then x <span class="keyword">else</span> acc) [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">1</span>]  </span><br><span class="line">[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>]  </span><br><span class="line">ghci&gt; scanl (flip (:)) [] [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </span><br><span class="line">[[],[<span class="number">3</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br></pre></td></tr></table></figure>
<p>需要多少个自然数才能使其开方的和大于1000</p>
<p><code>length (takeWhile (&lt;1000) (scanl1 (+) (map sqrt [1..]))) + 1</code></p>
<p>如何理解呢？</p>
<p>执行<code>takeWhile (&lt;1000) (scanl1 (+) (map sqrt [1..]))</code>得到的结果是</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1.0,2.41</span><span class="number">421356237309</span><span class="number">5,4.146264</span><span class="number">369941973</span>,<span class="number">6.146264369</span><span class="number">941973,8</span>.<span class="number">38233234744</span><span class="number">1762,10.83</span><span class="number">182209022494</span>,<span class="number">13.47757340</span><span class="number">128953,16.30</span><span class="number">60005260357</span><span class="number">2,19.30600</span><span class="number">052603572</span>,<span class="number">22.468278186</span><span class="number">2041,25.78</span><span class="number">49029765595</span>,<span class="number">29.249004591</span><span class="number">697254,32.85</span><span class="number">455586716124</span><span class="number">5,36.596213</span><span class="number">25393519,40</span>.<span class="number">469196600142</span><span class="number">61,44.469196</span><span class="number">60014261,48</span>.<span class="number">592302225760</span><span class="number">27,52.83494</span><span class="number">2912879555</span>,<span class="number">57.193841856</span><span class="number">42023,61.66</span><span class="number">597781141981</span>,<span class="number">66.248553506</span><span class="number">37564,70.93</span><span class="number">89692661990</span><span class="number">7,75.73480</span><span class="number">078951178,80</span>.<span class="number">63378027507</span><span class="number">814,85.63</span><span class="number">37802750781</span><span class="number">4,90.73279</span><span class="number">978867092</span>,<span class="number">95.928952211</span><span class="number">37755,101.220</span><span class="number">45483350674</span>,<span class="number">106.60561964</span><span class="number">064124,112.08</span><span class="number">28452156929</span>,<span class="number">117.65060957</span><span class="number">852292,123</span>.<span class="number">30746382801</span><span class="number">53,129.05202</span><span class="number">647455332</span>,<span class="number">134.88297836</span><span class="number">939861,140</span>.<span class="number">799058152498</span><span class="number">22,146.79905</span><span class="number">815249822,152</span>.<span class="number">88182068279</span><span class="number">644,159.04</span><span class="number">62346857654</span><span class="number">3,165.291232</span><span class="number">68416382,171</span>.<span class="number">61578800450</span><span class="number">06,178.01891</span><span class="number">224193344,184</span>.<span class="number">49965294034</span><span class="number">13,191.05709</span><span class="number">14646433,197</span>.<span class="number">69034104535</span><span class="number">41,204.39854</span><span class="number">497785348</span>,<span class="number">211.180874960</span><span class="number">97874,218.03</span><span class="number">652956137978</span>,<span class="number">224.96473279</span><span class="number">165528,231.96</span><span class="number">473279165528</span>,<span class="number">239.03580060</span><span class="number">352076,246</span>.<span class="number">177229032063</span><span class="number">6,253.38833</span><span class="number">158299158,26</span><span class="number">0.66844147</span><span class="number">22721,268</span>.<span class="number">01691070062</span><span class="number">16,275.43</span><span class="number">31091877172</span><span class="number">6,282.91</span><span class="number">642396126514</span>,<span class="number">290.46625</span><span class="number">839653586</span>,<span class="number">298.08203</span><span class="number">15023998,30</span><span class="number">5.763177250</span><span class="number">26837,313</span>.<span class="number">509143942683</span><span class="number">2,321.31</span><span class="number">93936185898</span><span class="number">6,329.193</span><span class="number">40149260165</span>,<span class="number">337.130655</span><span class="number">4257954,34</span><span class="number">5.130655425</span><span class="number">7954,353</span>.<span class="number">192913174094</span>,<span class="number">361.31695</span><span class="number">15787299,36</span><span class="number">9.50230435</span><span class="number">060234,377</span>.<span class="number">74851560183</span><span class="number">765,386</span>.<span class="number">055139464755</span><span class="number">7,394.42</span><span class="number">17397300965</span>,<span class="number">402.84788</span><span class="number">95032728,41</span><span class="number">1.333170877</span><span class="number">5114,419</span>.<span class="number">8771746228289</span><span class="number">3,428.47</span><span class="number">949988987153</span>,<span class="number">437.139753</span><span class="number">9277159,44</span><span class="number">5.85755181</span><span class="number">479726,45</span><span class="number">4.632516202</span><span class="number">1894,463</span>.<span class="number">46427706851</span><span class="number">72,472.35</span><span class="number">24714858328</span>,<span class="number">481.29674</span><span class="number">33958319,49</span><span class="number">0.29674339</span><span class="number">58319,499</span>.<span class="number">352128533969</span><span class="number">33,508.46</span><span class="number">25621131136</span>,<span class="number">517.62771</span><span class="number">35030253,52</span><span class="number">6.84725796</span><span class="number">03182,536</span>.<span class="number">1208764558139</span>,<span class="number">545.448255</span><span class="number">5089028,55</span><span class="number">4.82908702</span><span class="number">85497,564</span>.<span class="number">263068160606</span><span class="number">3,573.74</span><span class="number">99011411114</span>,<span class="number">583.28929</span><span class="number">31552809,59</span><span class="number">2.880956201</span><span class="number">9063,602</span>.<span class="number">52460696289</span><span class="number">93,612.219</span><span class="number">9666777319</span>,<span class="number">621.96676</span><span class="number">10225409,63</span><span class="number">1.76471999</span><span class="number">36737,641</span>.<span class="number">61357779546</span><span class="number">98,651.51</span><span class="number">30727320815</span>,<span class="number">661.46294</span><span class="number">71031477,67</span><span class="number">1.462947103</span><span class="number">1477,681</span>.<span class="number">51282272426</span><span class="number">86,691.61</span><span class="number">23276626307</span>,<span class="number">701.761219</span><span class="number">2277229,711</span>.<span class="number">959258254908</span><span class="number">5,722.206</span><span class="number">2090208681,73</span><span class="number">2.501839161</span><span class="number">8551,742</span>.<span class="number">84591959464</span><span class="number">36,753.238</span><span class="number">2244400569</span>,<span class="number">763.67853</span><span class="number">09489675,77</span><span class="number">4.1666194306</span><span class="number">69,784.70</span><span class="number">22731835218,79</span><span class="number">5.28527842</span><span class="number">77802,805</span>.<span class="number">9154242405149</span>,<span class="number">816.59250</span><span class="number">24925461,82</span><span class="number">7.31630778</span><span class="number">73097,838</span>.<span class="number">08663740157</span><span class="number">87,848.90</span><span class="number">32912279707</span>,<span class="number">859.76607</span><span class="number">17191709,87</span><span class="number">0.67478383</span><span class="number">38066,881</span>.<span class="number">629234983909</span><span class="number">9,892.62</span><span class="number">92349839099</span>,<span class="number">903.67459</span><span class="number">60010971,91</span><span class="number">4.765132507</span><span class="number">5066,925</span>.<span class="number">900661233166</span><span class="number">6,937.08</span><span class="number">10011206655</span>,<span class="number">948.30597</span><span class="number">32809874,95</span><span class="number">9.57540095</span><span class="number">0572,970</span>.<span class="number">889109449556</span><span class="number">7,982.246</span><span class="number">9261411572</span>,<span class="number">993.64868</span><span class="number">03921487</span>]</span><br></pre></td></tr></table></figure>
<p>取得 这个数组的长度 + 1之后就是解了。注意，这里不能使用filter，因为filter无法用于无限的数组</p>
<h4 id="Function_application_with_$">Function application with $</h4><p>理解这个符号<code>$</code>更好的方式是看例子</p>
<p> <code>sqrt (3 + 4 + 9)</code> 与 <code>sqrt 3 + 4 + 9</code> 是不等价的，但是 可以使用 <code>$</code> 来表示 符号右侧的表达式为左侧的输入值 <code>sqrt $ 3 + 4 + 9</code></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; <span class="built_in">sqrt</span> $ <span class="number">3</span> + <span class="number">4</span> + <span class="number">9</span></span><br><span class="line"><span class="number">4.0</span></span><br><span class="line">ghci&gt; <span class="built_in">sqrt</span> (<span class="number">3</span> + <span class="number">4</span> + <span class="number">9</span>)</span><br><span class="line"><span class="number">4.0</span></span><br><span class="line">ghci&gt; <span class="built_in">sqrt</span> <span class="number">3</span> + <span class="number">4</span> + <span class="number">9</span></span><br><span class="line"><span class="number">14.732050807568877</span></span><br></pre></td></tr></table></figure>
<p>再复杂一丢丢：<code>sum (filter (&gt; 10) (map (*2) [2..10]))</code> 要怎么改写呢？</p>
<p>首先 <code>filter (&gt; 10) (map (*2) [2..10])</code> 可以改写为 <code>filter (&gt;10) $ map (*2) [2..10]</code><br>继而可以改写为 <code>sum $ filter (&gt; 10) $ map (*2) [2..10]</code></p>
<h4 id="Function_composition">Function composition</h4><p>使用符号<code>.</code>来表示函数的组合，<code>f (g (x)) = (f.g) x</code>直接从例子中进行理解 <code>negate . (* 3)</code> 表示的是  乘于 3 让后变为负数</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; (negate . (* <span class="number">3</span>)) <span class="number">4</span></span><br><span class="line">-<span class="number">12</span></span><br><span class="line">ghci&gt; <span class="built_in">map</span> (negate . (* <span class="number">3</span>)) [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">[-<span class="number">3</span>,-<span class="number">6</span>,-<span class="number">9</span>]</span><br></pre></td></tr></table></figure>
<p>而组合不限于两个函数，可以多个组合 <code>f (g (z x)) = (f . g . z) x</code></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; <span class="built_in">map</span> (negate . sum . tail) [[<span class="number">1.</span><span class="number">.5</span>],[<span class="number">3.</span><span class="number">.6</span>],[<span class="number">1.</span><span class="number">.7</span>]]</span><br><span class="line">[-<span class="number">14</span>,-<span class="number">15</span>,-<span class="number">27</span>]</span><br></pre></td></tr></table></figure>
<p>上面举的例子都是只有一个参数的，如果是多个参数呢？答案就是 partial</p>
<p>例如  <code>sum (replicate 5 (max 6.7 8.9))</code>可以改写为 <code>(sum . replicate 5 . max 6.7) 8.9</code> 对与这个我目前不是很理解，不过还好作者指出了一个技巧，改写<code>replicate 100 (product (map (*3) (zipWith max [1,2,3,4,5] [4,5,6,7,8])))</code>  看起来很复杂，但其实很简单 <code>replicate 100 . product . map (*3) . zipWith max [1,2,3,4,5] $ [4,5,6,7,8]</code></p>
<p>那么这个函数组合到底对实际编程有什么用呢？看下面这个例子</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">oddSquareSum <span class="tag">:: Integer</span>  </span><br><span class="line">oddSquareSum = <span class="keyword">sum</span> (takeWhile (&lt;<span class="number">10000</span>) (filter odd (<span class="built_in">map</span> (^<span class="number">2</span>) <span class="preprocessor">[</span><span class="number">1.</span><span class="built_in">.</span><span class="preprocessor">]</span><span class="markup">)))</span></span><br></pre></td></tr></table></figure>
<p>可以改写为</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">oddSquareSum :: Integer  </span><br><span class="line"></span><br><span class="line">oddSquareSum = sum . takeWhile (&lt;<span class="number">10000</span>) . filter odd . <span class="built_in">map</span> (^<span class="number">2</span>) $ [<span class="number">1.</span>.]</span><br></pre></td></tr></table></figure>
<p>如果为了更好的可读性， 可以使用<code>let</code>来进行可读性的改善</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">oddSquareSum :: Integer  </span><br><span class="line">oddSquareSum =</span><br><span class="line">  let oddSquares = filter odd . <span class="built_in">map</span> (^<span class="number">2</span>) $ [<span class="number">1.</span>.]</span><br><span class="line">    bellowLimit = takeWhile (&lt;<span class="number">10000</span>) oddSquares</span><br><span class="line">  in sum bellowLimit</span><br></pre></td></tr></table></figure>
<h3 id="modules">modules</h3><h4 id="加载模块">加载模块</h4><p>加载模块的语法： <code>import &lt;module name&gt;</code></p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import Data.List</span><br><span class="line"></span><br><span class="line">numUniques :: (Eq a) =&gt; [a] -&gt; Int</span><br><span class="line">numUniques  = length . nub</span><br><span class="line">-<span class="ruby">- 与下面两种写法是等价的</span><br><span class="line"></span>-<span class="ruby">- numUniques xs = length . nub <span class="variable">$ </span>xs </span><br><span class="line"></span>-<span class="ruby">- nu mUniques xs = length (nub xs)</span></span><br></pre></td></tr></table></figure>
<p>在命令行模式下想要使用模块可以使用 <code>:m + &lt;module name&gt;</code>，如果有多个模块用空格隔开 例如 <code>:m + Data. List</code> </p>
<p>只需要 import 其中的几个函数</p>
<figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">Data</span>.<span class="built_in">List</span> (nub, sort)</span><br></pre></td></tr></table></figure>
<p>import 的时候排除某个函数</p>
<figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">Data</span>.<span class="built_in">List</span> hiding (nub)</span><br></pre></td></tr></table></figure>
<p>如果模块之间出现同名函数，可以通过 <code>qualified</code>来指定</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="import"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.Map  </span></span><br><span class="line"><span class="comment">-- 或者，命名空间太长，可以使用缩写</span></span><br><span class="line"><span class="import"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.Map <span class="keyword">as</span> M</span></span><br></pre></td></tr></table></figure>
<p>如果想要使用 Data.Map的filter函数，就需要通过 <code>Data.Map.filter</code> 或者 <code>M.filter</code> 进行调用，而<code>filter</code> 则会使用我们熟悉的那个 <code>filter</code>,来自于 Prelude 模块，该模块会预加载。<br>想要查询函数可以使用 <a href="https://www.haskell.org/hoogle/" target="_blank" rel="external">hoogle</a></p>
<h4 id="Data-List">Data.List</h4><p>Data.List中有一些很有用的函数<br><code>intersperse</code>,<code>intercalate</code>, <code>concat</code>  <code>concatMap</code>, <code>takeWhile</code>, <code>dropWhile</code>等等，下面列出一些对我有启发的函数：</p>
<h4 id="and_和_or"><code>and</code> 和 <code>or</code></h4><p><code>and $ map (==4) [2,3,4,5,6,1]</code>得到False 和 <code>or $ map (==4) [2,3,4,5,6,1]</code> 得到True</p>
<h4 id="any_和_all"><code>any</code> 和 <code>all</code></h4><p>例如 <code>any (==4) [1,2,3,4]</code> 得到True, 而</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="atom">all</span> (<span class="string">`elem`</span> [<span class="string">'A'</span>..<span class="string">'Z'</span>]) <span class="string">"HEYGUYSwhatsup"</span></span><br></pre></td></tr></table></figure>
<p>得到 False</p>
<h4 id="transpose"><code>transpose</code></h4><p><code>transpose</code>的用法对于我比较新奇 , 看书中的例子</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; transpose [[<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">9</span>],[<span class="number">8</span>,<span class="number">5</span>,<span class="number">1</span>,-<span class="number">1</span>]]</span><br><span class="line">[[<span class="number">0</span>,<span class="number">10</span>,<span class="number">8</span>],[<span class="number">3</span>,<span class="number">0</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">9</span>,<span class="number">9</span>,-<span class="number">1</span>]]</span><br><span class="line">ghci&gt; <span class="built_in">map</span> sum $ transpose [[<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">9</span>],[<span class="number">8</span>,<span class="number">5</span>,<span class="number">1</span>,-<span class="number">1</span>]]</span><br><span class="line">[<span class="number">18</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">17</span>]</span><br></pre></td></tr></table></figure>
<p><code>iterate</code></p>
<p><code>group</code>和<code>sort</code></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ghci&gt; <span class="built_in">map</span> (\l@(x:xs) -&gt; (x,length l)) . group . sort $ [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">[(<span class="number">1</span>,<span class="number">4</span>),(<span class="number">2</span>,<span class="number">7</span>),(<span class="number">3</span>,<span class="number">2</span>),(<span class="number">5</span>,<span class="number">1</span>),(<span class="number">6</span>,<span class="number">1</span>),(<span class="number">7</span>,<span class="number">1</span>)]</span><br></pre></td></tr></table></figure>
<p>记得<code>@</code>的用法吗?  l@(x:xs) 表示 <code>l</code> 代表 <code>(x:xs）</code></p>
<p><code>tails</code> 和 <code>inits</code></p>
<p>用tails实现字符串的search</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search :: (Eq a) =&gt; [a]<span class="function"> -&gt;</span> [a]<span class="function"> -&gt;</span> Bool  </span><br><span class="line">search needle haystack =   </span><br><span class="line">    <span class="keyword">let</span> nlen = length needle  </span><br><span class="line">    <span class="keyword">in</span>  foldl (<span class="string">\acc</span> x<span class="function"> -&gt;</span> <span class="keyword">if</span> take nlen x == needle <span class="keyword">then</span> True <span class="keyword">else</span> acc) False (tails haystack)</span><br></pre></td></tr></table></figure>
<p>首先 tails 执行得到 一个数组，例如 <code>tails &quot;abcde&quot;</code> 得到</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"abcde"</span>,<span class="string">"bcde"</span>,<span class="string">"cde"</span>,<span class="string">"de"</span>,<span class="string">"e"</span>,<span class="string">""</span>]</span><br></pre></td></tr></table></figure>
<p>然后使用foldl进行累积。 上面的实现其实就是函数<code>isInfixOf</code>所做的事情, 类似的字符串函数还有  <code>isPrefixOf</code> 和 <code>isSuffixOf</code></p>
<p><code>partition</code> , <code>span</code> 和 <code>break</code></p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hci&gt;  partition <span class="list">(`elem` [<span class="quoted">'A</span>'..<span class="quoted">'Z</span>'])</span> <span class="string">"BOBsidneyMORGANeddy"</span></span><br><span class="line"><span class="list">(<span class="string">"BOBMORGAN"</span>,<span class="string">"sidneyeddy"</span>)</span></span><br><span class="line">ghci&gt; span <span class="list">(`elem` [<span class="quoted">'A</span>'..<span class="quoted">'Z</span>'])</span> <span class="string">"BOBsidneyMORGANeddy"</span></span><br><span class="line"><span class="list">(<span class="string">"BOB"</span>,<span class="string">"sidneyMORGANeddy"</span>)</span></span><br><span class="line">ghci&gt; break <span class="list">(`elem` [<span class="quoted">'a</span>'..<span class="quoted">'z</span>'])</span> <span class="string">"BOBsidneyMORGANeddy"</span></span><br><span class="line"><span class="list">(<span class="string">"BOB"</span>,<span class="string">"sidneyMORGANeddy"</span>)</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在学习haskell，想要要深入的了解一下函数式编程(functional programming)，朋友建议可以通过学习这一门语言来加深理解。所以就尝试一下。<br><a href="http://learnyouahaskell.com/" target="_bla]]>
    </summary>
    
      <category term="haskell" scheme="http://zhangmhao.github.io/tags/haskell/"/>
    
      <category term="编程语言" scheme="http://zhangmhao.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[You don't konw js 之 Async & Performance 读书笔记]]></title>
    <link href="http://zhangmhao.github.io/2015/05/05/You-don't-know-js--Async-and-Performance-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://zhangmhao.github.io/2015/05/05/You-don't-know-js--Async-and-Performance-读书笔记/</id>
    <published>2015-05-04T16:00:00.000Z</published>
    <updated>2015-09-22T14:12:05.000Z</updated>
    <content type="html"><![CDATA[<p>「<a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="external">You don’t konw js</a>」对于有一定编程经验，对javascript有足够开发经验的人来讲，这本书简直就是福音，javascript很有“群众基础 ”，但同时也是被误解最多的语言之一。对于我个人而言，在读这本书的过程中，才发现自己对javascript也有许多误解的地方，收益匪浅。另外，这本书在Github上的关注度非常高, 作者<a href="http://getify.me/" target="_blank" rel="external">Kyle Simpson</a>能将复杂的概念，用一种非常舒服的逻辑给你娓娓道来。</p>
<p>这一篇是这个系列的其中一个本 <a href="https://github.com/getify/You-Dont-Know-JS/blob/master/async%20&amp;%20performance/README.md#you-dont-know-js-async--performance" target="_blank" rel="external">You Don’t Know JS: Async &amp; Performance</a>的读书笔记。</p>
<h3 id="Chapter1_:_Asynchrony:_Now_&amp;_Later">Chapter1 : Asynchrony: Now &amp; Later</h3><h4 id="Event_Loop">Event Loop</h4><p>如果要理解异步，Event Loop是一个重要的概念</p>
<p>摘录出书中描述event loop的伪代码</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// `eventLoop` is an array that acts as a queue (first-in, first-out)</span></span><br><span class="line"><span class="keyword">var</span> eventLoop = [ ];</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">event</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// keep going "forever"</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    <span class="comment">// perform a "tick"</span></span><br><span class="line">    <span class="keyword">if</span> (eventLoop.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// get the next event in the queue</span></span><br><span class="line">        <span class="keyword">event</span> = eventLoop.shift();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// now, execute the next event</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">event</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            reportError(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中while的每一次迭代叫做<code>tick</code>，事件按照顺序逐个执行。</p>
<blockquote>
<p>At any given moment, only one event can be processed from the queue at a time.<br>常见的setTimeout其实就是在时间过期的时候，callback函数就会被插入到Event loop queue中。</p>
</blockquote>
<h4 id="并行，并发">并行，并发</h4><p>并行相对于串行，指同一时刻处理多个任务(物理上的同时发生)，而并发指的是逻辑上的同时发生，而下降到物理层面（处理器），有可能是串行的。<br>js只有单线程，所以不需要考虑多线程并行(parallel thread)时遇到的问题。而并发(concurrency)在js中是存在的。</p>
<blockquote>
<p>Concurrency is when two or more chains of events interleave over time, such that from a high-level perspective, they appear to be running simultaneously (even though at any given moment only one event is being processed).</p>
</blockquote>
<p>以常见的滚动加载为例，这个例子中有两个Process, 滚动发起请求onScroll 和 处理响应结果 onResponse, 这两个是并发的。</p>
<p>“Process” 1 (onscroll events):</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">onscroll, request <span class="number">1</span></span><br><span class="line">onscroll, request <span class="number">2</span></span><br><span class="line">onscroll, request <span class="number">3</span></span><br><span class="line">onscroll, request <span class="number">4</span></span><br><span class="line">onscroll, request <span class="number">5</span></span><br><span class="line">onscroll, request <span class="number">6</span></span><br><span class="line">onscroll, request <span class="number">7</span></span><br></pre></td></tr></table></figure>
<p>“Process” 2 (Ajax response events):</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">response <span class="number">1</span></span><br><span class="line">response <span class="number">2</span></span><br><span class="line">response <span class="number">3</span></span><br><span class="line">response <span class="number">4</span></span><br><span class="line">response <span class="number">5</span></span><br><span class="line">response <span class="number">6</span></span><br><span class="line">response <span class="number">7</span></span><br></pre></td></tr></table></figure>
<p>如果将这两个Process放入真实的时间线中，是有可能“<strong>同时发生</strong>”的，这里之所以给同时发生加上引号，是因为根据Event loop的定义，真正意义的同时发生是不可能的，还是按照序列的排队来执行的。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">onscroll, request <span class="number">1</span></span><br><span class="line">onscroll, request <span class="number">2</span>          response <span class="number">1</span></span><br><span class="line">onscroll, request <span class="number">3</span>          response <span class="number">2</span></span><br><span class="line">response <span class="number">3</span></span><br><span class="line">onscroll, request <span class="number">4</span></span><br><span class="line">onscroll, request <span class="number">5</span></span><br><span class="line">onscroll, request <span class="number">6</span>          response <span class="number">4</span></span><br><span class="line">onscroll, request <span class="number">7</span></span><br><span class="line">response <span class="number">6</span></span><br><span class="line">response <span class="number">5</span></span><br><span class="line">response <span class="number">7</span></span><br></pre></td></tr></table></figure>
<h4 id="ES6中的Job_queue">ES6中的Job queue</h4><blockquote>
<p>Jobs are kind of like the spirit of the setTimeout(..0) hack, but implemented in such a way as to have a much more well-defined and guaranteed ordering: later, but as soon as possible.</p>
</blockquote>
<h3 id="Chapter2:_Callback">Chapter2: Callback</h3><blockquote>
<p>Callbacks are the fundamental unit of asynchrony in JS. But they’re not enough for the evolving landscape of async programming as JS matures.<br>First, our brains plan things out in sequential, blocking, single-threaded semantic ways, but callbacks express asynchronous flow in a rather nonlinear, nonsequential way, which makes reasoning properly about such code much harder. Bad to reason about code is bad code that leads to bad bugs.</p>
</blockquote>
<p><strong> callback hell</strong></p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">listen<span class="list">( <span class="string">"click"</span>, function handler<span class="list">(<span class="keyword">evt</span>)</span>&#123;</span><br><span class="line">    setTimeout<span class="list">( <span class="keyword">function</span> request<span class="list">()</span>&#123;</span><br><span class="line">        ajax<span class="list">( <span class="string">"http://some.url.1"</span>, function response<span class="list">(<span class="keyword">text</span>)</span>&#123;</span><br><span class="line">            if <span class="list">(<span class="keyword">text</span> == <span class="string">"hello"</span>)</span> &#123;</span><br><span class="line">                handler<span class="list">()</span><span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">            else if <span class="list">(<span class="keyword">text</span> == <span class="string">"world"</span>)</span> &#123;</span><br><span class="line">                request<span class="list">()</span><span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; )</span><span class="comment">;</span></span><br><span class="line">    &#125;, <span class="number">500</span>)</span> <span class="comment">;</span></span><br><span class="line">&#125; )</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>改造方法：</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">listen( <span class="string">"click"</span>, handler );</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span><span class="params">()</span> &#123;</span></span><br><span class="line">    setTimeout( request, <span class="number">500</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">()</span>&#123;</span></span><br><span class="line">    ajax( <span class="string">"http://some.url.1"</span>, response );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">response</span><span class="params">(text)</span>&#123;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">text</span> == <span class="string">"hello"</span>) &#123;</span><br><span class="line">        handler();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">text</span> == <span class="string">"world"</span>) &#123;</span><br><span class="line">        request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>our sequential, blocking brain planning behaviors just don’t map well onto callback-oriented async code? That’s the first major deficiency to articulate about callbacks: they express asynchrony in code in ways our brains have to fight just to keep in sync with (pun intended!).</p>
</blockquote>
<p>当然，上面的方法虽然看起来没有嵌套了，但实际并没有解决根本的问题，我们依旧难以流畅的阅读代码。所以，javascript在发展的过程中，ES6也提出了更多的解决方案，这个后面再继续。我们先来看callback存在的其他问题。</p>
<h4 id="callback的信任问题">callback的信任问题</h4><p>当我们调用第三方模块的API时，我们无法保证这些模块对回调的处理永远正确的（第三方组件的升级），例如</p>
<ul>
<li>没有调用回调函数</li>
<li>调用多次</li>
<li>参数出现问题</li>
<li>没有抛出发生的错误。</li>
</ul>
<p>这就是信任问题，要规避这些问题，就必须写一些代码来防止这些错误的发生。作者在书中举了一个例子</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用第三方的统计平台的API，记录完之后在扣信用卡，和展示成功页面</span></span><br><span class="line">analytics.trackPurchase( purchaseData, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    chargeCreditCard();</span><br><span class="line">    displayThankyouPage();</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure>
<p>但是由于统计平台的的API误升级，导致了多次调用回调函数，从而造成用户的信用卡被多次扣费。规避的方式也简单，只要增加一个全局变量来判断即可</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tracked = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">analytics.trackPurchase( purchaseData, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tracked) &#123;</span><br><span class="line">        tracked = <span class="literal">true</span>;</span><br><span class="line">        chargeCreditCard();</span><br><span class="line">        displayThankyouPage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure>
<p><strong>保证异步的调用顺序</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncify</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> orig_fn = fn,</span><br><span class="line">        intv = setTimeout( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            intv = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (fn) fn();</span><br><span class="line">        &#125;, <span class="number">0</span> )</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    fn = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// firing too quickly, before `intv` timer has fired to</span></span><br><span class="line">        <span class="comment">// indicate async turn has passed?</span></span><br><span class="line">        <span class="keyword">if</span> (intv) &#123;</span><br><span class="line">            fn = orig_fn.bind.apply(</span><br><span class="line">                orig_fn,</span><br><span class="line">                <span class="comment">// add the wrapper's `this` to the `bind(..)`</span></span><br><span class="line">                <span class="comment">// call parameters, as well as currying any</span></span><br><span class="line">                <span class="comment">// passed in parameters</span></span><br><span class="line">                [<span class="keyword">this</span>].concat( [].slice.call( <span class="built_in">arguments</span> ) )</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// already async</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// invoke original function</span></span><br><span class="line">            orig_fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Chapter_3_Promises">Chapter 3 Promises</h3><blockquote>
<p>What if instead of handing the continuation of our program to another party, we could expect it to return us a capability to know when its task finishes, and then our code could decide what to do next? This paradigm is called Promises.<br>Promises are an easily repeatable mechanism for encapsulating and composing future values.<br>flow-control mechanism</p>
<p>Promises are awesome. Use them. They solve the inversion of control issues that plague us with callbacks-only code.</p>
<p>They don’t get rid of callbacks, they just redirect the orchestration of those callbacks to a trustable intermediary mechanism that sits between us and another utility.<br>Promise chains also begin to address (though certainly not perfectly) a better way of expressing async flow in sequential fashion, </p>
</blockquote>
<h4 id="Promise如何解决信任问题">Promise如何解决信任问题</h4><h5 id="确定的执行顺序">确定的执行顺序</h5><p><strong>过早调用</strong> 当你在Promise对象上调用<code>then</code>的时候，不管Promise是不是已经resolve，都不会是同步运行的，所以可以避免运行顺序导致的竞态问题。<br><strong>调用顺序</strong> 当Promise resolve的时候，所有通过<code>then</code>注册的callback会按照顺序调用，callback中发生的事情不会影响其他callback</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">p.then( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    p.then( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">"C"</span> );</span><br><span class="line">    &#125; );</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"A"</span> );</span><br><span class="line">&#125; );</span><br><span class="line">p.then( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"B"</span> );</span><br><span class="line">&#125; );</span><br><span class="line"><span class="comment">// A B C</span></span><br></pre></td></tr></table></figure>
<p><strong>确保返回参数是Promise对象</strong>  </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// don't just do this:</span></span><br><span class="line">foo( <span class="number">42</span> )</span><br><span class="line">.then( <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( v );</span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line"><span class="comment">// instead, do this:</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve( foo( <span class="number">42</span> ) )</span><br><span class="line">.then( <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( v );</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure>
<h4 id="Chain_Flow">Chain Flow</h4><h5 id="Terminology:_Resolve,_Fulfill,_and_Reject">Terminology: Resolve, Fulfill, and Reject</h5><p>作者讲了如何使用这几个单词，为什么是使用resolve而不是fulfill？但是看完之后不是特别理解，所以后面再补充。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fulfilled</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( msg );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rejected</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error( err );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p.then(</span><br><span class="line">    fulfilled,</span><br><span class="line">    rejected</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h4 id="Error_Handling">Error Handling</h4><p>一般错误处理使用<code>try-catch</code>，但是由于try-catch不支持异步，所以无法捕抓到异步运行函数的错误。</p>
<p>回调函数中，有一个标准叫做  <code>error-first callback</code>, 广泛应用于node的api种，例如</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(path, <span class="function"><span class="keyword">function</span> <span class="params">(err, content)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">//处理错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>而在Promise中，采用的是  <code>split callbacks</code> ; 一个函数负责处理”fulfillment” , 另外一个处理”rejection”</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.reject( <span class="string">"Oops"</span> );</span><br><span class="line"></span><br><span class="line">p.then(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fulfilled</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// never gets here</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">rejected</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( err ); <span class="comment">// "Oops"</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>Promise的错误处理还有一些需要注意的地方，看下面这个例子: </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.resolve( <span class="number">42</span> );</span><br><span class="line"></span><br><span class="line">p.then(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fulfilled</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// numbers don't have string functions,</span></span><br><span class="line">        <span class="comment">// so will throw an error</span></span><br><span class="line">        <span class="built_in">console</span>.log( msg.toLowerCase() );</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">rejected</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// never gets here</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>其中的错误处理函数 是永远不会运行的, 因为rejected函数是提供给p这个promise的，而promise一旦resolve，就是immutable的，所以如果要处理这个错误，就只能留给 p.then() 执行后返回的新的promise.</p>
<p>如果要处理这种情况，按照Promise的定义</p>
<blockquote>
<p>The then(null,function(err){ .. }) pattern – only handling rejections (if any) but letting fulfillments pass through – has a shortcut in the API: catch(function(err){ .. }).</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.resolve( <span class="number">42</span> );</span><br><span class="line"></span><br><span class="line">p.then(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fulfilled</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// numbers don't have string functions,</span></span><br><span class="line">        <span class="comment">// so will throw an error</span></span><br><span class="line">        <span class="built_in">console</span>.log( msg.toLowerCase() );</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">.catch( handleErrors );</span><br></pre></td></tr></table></figure>
<p>到了这里，问题还没有完全的解决，因为handleErrors函数也有可能会出错。继续.catch()多一个错误处理函数也是行不通的。因为另一个错误处理函数也会报错。解决的办法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.resolve( <span class="number">42</span> );</span><br><span class="line"></span><br><span class="line">p.then(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fulfilled</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// numbers don't have string functions,</span></span><br><span class="line">        <span class="comment">// so will throw an error</span></span><br><span class="line">        <span class="built_in">console</span>.log( msg.toLowerCase() );</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">.done( <span class="literal">null</span>, handleErrors );</span><br><span class="line"></span><br><span class="line"><span class="comment">// if `handleErrors(..)` caused its own exception, it would</span></span><br><span class="line"><span class="comment">// be thrown globally here</span></span><br></pre></td></tr></table></figure>
<p>如果handleErrors发生异常，那么会直接抛出错误， 从而避免错误被开发者忽略。但是done并不是ES6的标准<br>，如果要使用这种方式，就只能自己封装，或者使用一些比较可靠的Promise库</p>
<p>那么，难道没有其他方式了吗？作者在这一章的最后给出了一个解决方案，但是这个同样是ES6不支持的，只是比上面的解决办法更加优雅一些</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.reject( <span class="string">"Oops"</span> ).defer();</span><br><span class="line"></span><br><span class="line"><span class="comment">// `foo(..)` is Promise-aware</span></span><br><span class="line">foo( <span class="number">42</span> )</span><br><span class="line">.then(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fulfilled</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">rejected</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// handle `foo(..)` error</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>The promise returned from foo(..) gets an error handler attached right away, so it’s implicitly opted out and no global reporting for it occurs either.<br>But the promise returned from the then(..) call has no defer() or error handler attached, so if it rejects (from inside either resolution handler), then it will be reported to the developer console as an uncaught error.</p>
</blockquote>
<h4 id="Promise_Patterns">Promise Patterns</h4><h5 id="Promise-all([_-_])">Promise.all([ .. ])</h5><p>当所有的Promsie都resolve的时候，则继续流程，其中有一个rejected，则进入错误处理函数。与promise resolve的顺序无关，则要全部完成即满足条件，继续流程。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// `request(..)` is a Promise-aware Ajax utility,</span></span><br><span class="line"><span class="comment">// like we defined earlier in the chapter</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = request( <span class="string">"http://some.url.1/"</span> );</span><br><span class="line"><span class="keyword">var</span> p2 = request( <span class="string">"http://some.url.2/"</span> );</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all( [p1,p2] )</span><br><span class="line">.then( <span class="function"><span class="keyword">function</span>(<span class="params">msgs</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// both `p1` and `p2` fulfill and pass in</span></span><br><span class="line">    <span class="comment">// their messages here</span></span><br><span class="line">    <span class="keyword">return</span> request(</span><br><span class="line">        <span class="string">"http://some.url.3/?v="</span> + msgs.join(<span class="string">","</span>)</span><br><span class="line">    );</span><br><span class="line">&#125; )</span><br><span class="line">.then( <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( msg );</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure>
<h5 id="Promise-race([_-_])">Promise.race([ .. ])</h5><p>同时有多个Promise，只取最先resolve的promise，其他都抛弃。而只要其中一个rejected，则会直接reject。这一点和<code>Promise.all()</code>是一样的</p>
<h4 id="Promise_Limitations">Promise Limitations</h4><ul>
<li>Sequence Error Handling</li>
<li>Single Value</li>
</ul>
<h3 id="Chapter_4:_Generators">Chapter 4: Generators</h3><blockquote>
<p>Generators are a new ES6 function type that does not run-to-completion like normal functions. Instead, the generator can be paused in mid-completion (entirely preserving its state), and it can later be resumed from where it left off.<br>This pause/resume interchange is cooperative rather than preemptive, which means that the generator has the sole capability to pause itself, using the yield keyword, and yet the iterator that controls the generator has the sole capability (via next(..)) to resume the generator.<br><strong>The yield / next(..) duality is not just a control mechanism, it’s actually a two-way message passing mechanism.</strong> A yield .. expression essentially pauses waiting for a value, and the next next(..) call passes a value (or implicit undefined) back to that paused yield expression.</p>
<p><strong>The key benefit of generators related to async flow control is that the code inside a generator expresses a sequence of steps for the task in a naturally sync/sequential fashion. </strong> The trick is that we essentially hide potential asynchrony behind the yield keyword – moving the asynchrony to the code where the generator’s iterator is controlled.</p>
<p>In other words, <strong>generators preserve a sequential, synchronous, blocking code pattern for async code, which lets our brains reason about the code much more naturally,</strong> addressing one of the two key drawbacks of callback-based async.</p>
</blockquote>
<p>generator的理念很简单，就是可以中断函数的执行，然后重新开始。看一下简单的例子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    x++;</span><br><span class="line">    <span class="keyword">yield</span>; <span class="comment">// pause!</span></span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">"x:"</span>, x );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    x++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// construct an iterator `it` to control the generator</span></span><br><span class="line"><span class="keyword">var</span> it = foo();</span><br><span class="line"></span><br><span class="line"><span class="comment">// start `foo()` here!</span></span><br><span class="line">it.next();</span><br><span class="line">x;                      <span class="comment">// 2</span></span><br><span class="line">bar();</span><br><span class="line">x;                      <span class="comment">// 3</span></span><br><span class="line">it.next();              <span class="comment">// x: 3</span></span><br></pre></td></tr></table></figure>
<p><code>it = foo()</code>的时候函数主体其实是没有运行的，返回了一个Iterator给你控制函数的执行。第一次 调用 <code>it.next()</code>, 函数执行到<code>yeild</code>声明的位置，然后暂停, 第二次 <code>it.next()</code>的时候 继续执行，也就是 <code>console.log( &quot;x:&quot;, x )</code></p>
<h4 id="Iteration_Messaging">Iteration Messaging</h4><p><code>Iterator.next()</code>可以实现函数内部和外部的双向交流</p>
<p>例如 向函数内部发送参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = x * (<span class="keyword">yield</span>); <span class="comment">// This yield is basically asking a question: "What value should I insert here?"</span></span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> it = foo( <span class="number">6</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// start `foo(..)`</span></span><br><span class="line">it.next();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = it.next( <span class="number">7</span> );</span><br><span class="line"></span><br><span class="line">res.value;      <span class="comment">// 42</span></span><br></pre></td></tr></table></figure></p>
<p>双向交流</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y = x * (<span class="keyword">yield</span> <span class="string">"Hello"</span>);    <span class="comment">// &lt;-- yield a value!</span></span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> it = foo( <span class="number">6</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = it.next();    <span class="comment">// first `next()`, don't pass anything</span></span><br><span class="line">res.value;              <span class="comment">// "Hello"</span></span><br><span class="line"></span><br><span class="line">res = it.next( <span class="number">7</span> );     <span class="comment">// pass `7` to waiting `yield`</span></span><br><span class="line">res.value;              <span class="comment">// 42</span></span><br></pre></td></tr></table></figure>
<h4 id="Multiple_Iterators">Multiple Iterators</h4><p>错综复杂的一个例子</p>
<figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function *foo() &#123;</span><br><span class="line">    <span class="built_in">var</span> x = yield <span class="number">2</span>;</span><br><span class="line">    z++;</span><br><span class="line">    <span class="built_in">var</span> y = yield (x * z);</span><br><span class="line">    console.log( x, y, z );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">var</span> z = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">var</span> it1 = foo();</span><br><span class="line"><span class="built_in">var</span> it2 = foo();</span><br><span class="line"></span><br><span class="line"><span class="built_in">var</span> val1 = it1.<span class="built_in">next</span>().<span class="built_in">value</span>;            <span class="comment">// 2 &lt;-- yield 2</span></span><br><span class="line"><span class="built_in">var</span> val2 = it2.<span class="built_in">next</span>().<span class="built_in">value</span>;            <span class="comment">// 2 &lt;-- yield 2</span></span><br><span class="line"></span><br><span class="line">val1 = it1.<span class="built_in">next</span>( val2 * <span class="number">10</span> ).<span class="built_in">value</span>;     <span class="comment">// 40  &lt;-- x:20,  z:2</span></span><br><span class="line">val2 = it2.<span class="built_in">next</span>( val1 * <span class="number">5</span> ).<span class="built_in">value</span>;      <span class="comment">// 600 &lt;-- x:200, z:3</span></span><br><span class="line"></span><br><span class="line">it1.<span class="built_in">next</span>( val2 / <span class="number">2</span> );                   <span class="comment">// y:300</span></span><br><span class="line">                                        <span class="comment">// 20 300 3</span></span><br><span class="line">it2.<span class="built_in">next</span>( val1 / <span class="number">4</span> );                   <span class="comment">// y:10</span></span><br><span class="line">                                        <span class="comment">// 200 10 3</span></span><br></pre></td></tr></table></figure>
<p>如何让generator结束</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">something</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> nextVal;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nextVal === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                nextVal = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                nextVal = (<span class="number">3</span> * nextVal) + <span class="number">6</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">yield</span> nextVal;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cleanup clause</span></span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">"cleaning up!"</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>外部的break也会触发 finnally的执行 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> v <span class="keyword">of</span> something()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log( v );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// don't let the loop run forever!</span></span><br><span class="line">    <span class="keyword">if</span> (v &gt; <span class="number">500</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 9 33 105 321 969</span></span><br><span class="line"><span class="comment">// cleaning up!</span></span><br></pre></td></tr></table></figure>
<p>或者可以执行 return()来结束generator</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> it = something();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> v <span class="keyword">of</span> it) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log( v );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// don't let the loop run forever!</span></span><br><span class="line">    <span class="keyword">if</span> (v &gt; <span class="number">500</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">            <span class="comment">// complete the generator's iterator</span></span><br><span class="line">            it.return( <span class="string">"Hello World"</span> ).value</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// no `break` needed here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 9 33 105 321 969</span></span><br><span class="line"><span class="comment">// cleaning up!</span></span><br><span class="line"><span class="comment">// Hello World</span></span><br></pre></td></tr></table></figure>
<h4 id="异步的Generator">异步的Generator</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">    ajax(</span><br><span class="line">        <span class="string">"http://some.url.1/?x="</span> + x + <span class="string">"&amp;y="</span> + y,</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="comment">// throw an error into `*main()`</span></span><br><span class="line">                it.throw( err );</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// resume `*main()` with received `data`</span></span><br><span class="line">                it.next( data );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> text = <span class="keyword">yield</span> foo( <span class="number">11</span>, <span class="number">31</span> );</span><br><span class="line">        <span class="built_in">console</span>.log( text );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error( err );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> it = main();</span><br><span class="line"></span><br><span class="line"><span class="comment">// start it all up!</span></span><br><span class="line">it.next();</span><br></pre></td></tr></table></figure>
<h4 id="Generators_+_Promises">Generators + Promises</h4><p>结合 Gernerator(异步代码同步化而带来的易读)和Promise(可信赖)的好处</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> request(</span><br><span class="line">        <span class="string">"http://some.url.1/?x="</span> + x + <span class="string">"&amp;y="</span> + y</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> text = <span class="keyword">yield</span> foo( <span class="number">11</span>, <span class="number">31</span> );</span><br><span class="line">        <span class="built_in">console</span>.log( text );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error( err );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> it = main();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = it.next().value;</span><br><span class="line"></span><br><span class="line"><span class="comment">// wait for the `p` promise to resolve</span></span><br><span class="line">p.then(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">        it.next( text );</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        it.throw( err );</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>但是如果每一次都要那么麻烦的话，写代码也太痛苦了，我们来抽象这一个模式, 开发一个工具函数来减少我们的痛苦, 书中作者提供的一个函数<code>run()</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// thanks to Benjamin Gruenbaum (@benjamingr on GitHub) for</span></span><br><span class="line"><span class="comment">// big improvements here!</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">gen</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = [].slice.call( <span class="built_in">arguments</span>, <span class="number">1</span>), it;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// initialize the generator in the current context</span></span><br><span class="line">    it = gen.apply( <span class="keyword">this</span>, args );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return a promise for the generator completing</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</span><br><span class="line">        .then( <span class="function"><span class="keyword">function</span> <span class="title">handleNext</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// run to the next yielded value</span></span><br><span class="line">            <span class="keyword">var</span> next = it.next( value );</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span> <span class="title">handleResult</span>(<span class="params">next</span>)</span>&#123;</span><br><span class="line">                <span class="comment">// generator has completed running?</span></span><br><span class="line">                <span class="keyword">if</span> (next.done) &#123;</span><br><span class="line">                    <span class="keyword">return</span> next.value;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// otherwise keep going</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve( next.value )</span><br><span class="line">                        .then(</span><br><span class="line">                            <span class="comment">// resume the async loop on</span></span><br><span class="line">                            <span class="comment">// success, sending the resolved</span></span><br><span class="line">                            <span class="comment">// value back into the generator</span></span><br><span class="line">                            handleNext,</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// if `value` is a rejected</span></span><br><span class="line">                            <span class="comment">// promise, propagate error back</span></span><br><span class="line">                            <span class="comment">// into the generator for its own</span></span><br><span class="line">                            <span class="comment">// error handling</span></span><br><span class="line">                            <span class="function"><span class="keyword">function</span> <span class="title">handleErr</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(</span><br><span class="line">                                    it.throw( err )</span><br><span class="line">                                )</span><br><span class="line">                                .then( handleResult );</span><br><span class="line">                            &#125;</span><br><span class="line">                        );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)(next);</span><br><span class="line">        &#125; );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有了这个函数，上面的例子就可以改写为</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">main</span><span class="params">()</span> <span class="comment">&#123;</span><br><span class="line">    // ..</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="title">run</span><span class="params">( main )</span>;</span></span><br></pre></td></tr></table></figure>
<p> 是不是简洁了许多！</p>
<h5 id="处理Generator的并发">处理Generator的并发</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r1 = <span class="keyword">yield</span> request( <span class="string">"http://some.url.1"</span> );</span><br><span class="line">    <span class="keyword">var</span> r2 = <span class="keyword">yield</span> request( <span class="string">"http://some.url.2"</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> r3 = <span class="keyword">yield</span> request(</span><br><span class="line">        <span class="string">"http://some.url.3/?v="</span> + r1 + <span class="string">","</span> + r2</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log( r3 );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use previously defined `run(..)` utility</span></span><br><span class="line">run( foo );</span><br></pre></td></tr></table></figure>
<p>上面这个例子是可以正确运行的，但是仔细观察代码，你会发觉这段代码其实存在效率的问题，因为request其实是可以并发的，但是上例让request变成了串行了。改进一下</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">function</span> *foo() &#123;</span><br><span class="line">    var <span class="literal">p1</span> = request( <span class="string">"http://some.url.1"</span> )<span class="comment">;</span></span><br><span class="line">    var <span class="literal">p2</span> = request( <span class="string">"http://some.url.2"</span> )<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    var <span class="literal">r1</span> = yeild <span class="literal">p1</span><span class="comment">;</span></span><br><span class="line">    var <span class="literal">r2</span> = yeild <span class="literal">p2</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">    var <span class="literal">p3</span> = <span class="keyword">yield </span>request(</span><br><span class="line">        <span class="string">"http://some.url.3/?v="</span> + <span class="literal">r1</span> + <span class="string">","</span> + <span class="literal">r2</span></span><br><span class="line">    )<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者使用<code>Promise.all()</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// make both requests "in parallel," and</span></span><br><span class="line">    <span class="comment">// wait until both promises resolve</span></span><br><span class="line">    <span class="keyword">var</span> results = <span class="keyword">yield</span> <span class="built_in">Promise</span>.all( [</span><br><span class="line">        request( <span class="string">"http://some.url.1"</span> ),</span><br><span class="line">        request( <span class="string">"http://some.url.2"</span> )</span><br><span class="line">    ] );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> [r1,r2] = results;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> r3 = <span class="keyword">yield</span> request(</span><br><span class="line">        <span class="string">"http://some.url.3/?v="</span> + r1 + <span class="string">","</span> + r2</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log( r3 );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// use previously defined `run(..)` utility</span></span><br><span class="line">run( foo );</span><br></pre></td></tr></table></figure>
<h4 id="Generator_delegation">Generator delegation</h4><p>todo</p>
<h4 id="Generator_Concurrency">Generator Concurrency</h4><p>todo </p>
<h4 id="thunks_和_promise_和_generator">thunks 和 promise 和 generator</h4><h3 id="Performace">Performace</h3><p>我觉得这一章下面这一句话就足够了：</p>
<blockquote>
<p> non-critical path optimization is the root of all evil</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>「<a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="external">You don’t konw js</a>」对于有一定编程经验，对javascript有足够开发经验的人]]>
    </summary>
    
      <category term="javascript" scheme="http://zhangmhao.github.io/tags/javascript/"/>
    
      <category term="编程语言" scheme="http://zhangmhao.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="读书笔记" scheme="http://zhangmhao.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Life Time Tracker的设计理念]]></title>
    <link href="http://zhangmhao.github.io/2015/04/12/Life-time-tracker%E8%A1%A8%E8%BE%BE%E7%9A%84%E7%90%86%E5%BF%B5/"/>
    <id>http://zhangmhao.github.io/2015/04/12/Life-time-tracker表达的理念/</id>
    <published>2015-04-11T16:00:00.000Z</published>
    <updated>2015-09-22T14:12:57.000Z</updated>
    <content type="html"><![CDATA[<p>开发<a href="https://github.com/zhangmhao/Life-Time-Tracker" target="_blank" rel="external">Life Time Tracker</a>最初的源头来自于一本叫「<a href="http://book.douban.com/subject/1115353/" target="_blank" rel="external">奇特的一生</a>」的书籍，讲述了柳比歇夫通过他的时间统计法对自己生活的方方面面进行了研究和试验，度过了极其高产的一生。我很想实践柳比歇夫的统计方法，第一个想法就是必须得通过计算机来自动化；但是没有找到合适自己使用的工具，决定自己开发一个，顺便尝试一下nwjs + react的组合来开发桌面App。</p>
<p><strong> 为什么要记录过去的时间？</strong></p>
<blockquote>
<p>You can’t optimize what you can’t measure</p>
</blockquote>
<p>这一句话其实已经用最简洁的语言回答了我的疑问。</p>
<h3 id="尽可能详细的描述时间">尽可能详细的描述时间</h3><p>日志中用到了<code>标签(Tag)</code>，<code>分类(Category)</code>，<code>项目(Project)</code>，<code>版本(Version)</code>，<code>任务(Task)</code>, <code>子任务(SubTask)</code>这几个维度维度来定义，或描述一段时间，为后续的统计提供足够的信息，信息越详细，就越能够从中分析得到更多感兴趣的内容。</p>
<p>例如记录今天开的一个会议，提供的信息越多，就可以越接近这段时间的「真相」，为后面可能的数据分析提供足够的信息</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">00</span>~<span class="number">11</span>:<span class="number">00</span> &#123;WK&#125;[会议,需求评审]&lt;Test Project&gt;$<span class="number">1.0</span><span class="number">.0</span>$(Task Name)</span><br></pre></td></tr></table></figure>
<h3 id="简单专注的单线程生活">简单专注的单线程生活</h3><p>在一个时间段里面只做一件事情，专心的吃饭，享受食物带来的快乐；放下手中的工作，安安静静的坐着品味音乐；跑步时将精神集中于自己的身体，协调每一块肌肉的运动；沏一壶好茶，和一两个好友聊天交流。一次只做一件事情，这看起来低效，但其实是最高效的，对于个人而言，这样的单位时间的价值是最高的，因为专注投入是获得深层次快乐的必要条件。</p>
<p>所以，日志类似于下面的格式，一个时间流里，只做一件事情</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>:<span class="number">53</span></span><br><span class="line"><span class="number">8</span>:<span class="number">30</span>~<span class="number">9</span>:<span class="number">00</span> &#123;NT&#125;[self_clean]</span><br><span class="line"><span class="number">9</span>:<span class="number">00</span>~<span class="number">9</span>:<span class="number">20</span> &#123;NT&#125;[交通]</span><br><span class="line"><span class="number">9</span>:<span class="number">20</span>~<span class="number">9</span>:<span class="number">42</span> &#123;NT&#125;[早餐]</span><br><span class="line"><span class="number">10</span>:<span class="number">01</span>~<span class="number">10</span>:<span class="number">51</span> &#123;WK&#125;[晨会]&lt;项目&gt;$<span class="number">2.0</span><span class="number">.0</span>$ 讨论UI编辑事宜</span><br><span class="line"><span class="number">12</span>:<span class="number">00</span>~<span class="number">12</span>:<span class="number">25</span> &#123;NT&#125;[lunch]</span><br><span class="line"><span class="number">12</span>:<span class="number">33</span>~<span class="number">12</span>:<span class="number">57</span> &#123;STU&#125;[ted]&lt;One TED A Day&gt;(为什么要学习?)</span><br><span class="line"><span class="number">13</span>:<span class="number">19</span>~<span class="number">13</span>:<span class="number">38</span> &#123;BRK&#125;[午休]</span><br><span class="line"><span class="number">13</span>:<span class="number">50</span>~<span class="number">14</span>:<span class="number">07</span> &#123;BRK&#125;[meditation]</span><br><span class="line"><span class="number">15</span>:<span class="number">40</span>~<span class="number">15</span>:<span class="number">48</span> &#123;SPR&#125;[短运]</span><br><span class="line"><span class="number">16</span>:<span class="number">36</span>~<span class="number">17</span>:<span class="number">18</span> &#123;NT&#125;[下午茶]</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="number">20</span>:<span class="number">12</span>~<span class="number">21</span>:<span class="number">14</span> &#123;BRK&#125;[听音乐]</span><br><span class="line"><span class="number">23</span>:<span class="number">50</span></span><br></pre></td></tr></table></figure>
<h3 id="归类">归类</h3><p>我们处理事情的时候有一种非常有用的思维方式，叫分类；无论是学科知识，还是生活工作，分类是一个行之有效的方法；</p>
<p>而在LTT的记录方式种，就是通过一种分类来让生活变得更加<code>有序</code>，而这种记录过程中对过往的review，也在强化这种有序；例如我每天对我日常的一些活动进行归类</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">00</span>~<span class="number">11</span>:<span class="number">00</span> &#123;STU&#125;[读书]&lt;格物致知&gt;(世界通史:pg=<span class="number">40</span>)</span><br><span class="line"><span class="number">11</span>:<span class="number">00</span>~<span class="number">12</span>:<span class="number">00</span> &#123;TK&#125;[生活优化]&lt;格物致知&gt;(思考Life-time-tracker背后的理念)</span><br></pre></td></tr></table></figure>
<p>而这些合理的分类也是后面的数据分析得以进行的基础</p>
<h3 id="提供自我优化的机制_Feedback-Loop">提供自我优化的机制 Feedback-Loop</h3><p>人的生活包含了工作，娱乐，运动 ，情感，智力等方面，每一方面都是不可缺失的，在这些方面有一个良好的时间分配，对于个人的生活影响是非常大的，例如，如果一个人有情绪低落，只要通过运动，与人交流，短时间内就可以得到明显的效果；而如果长时间工作不休息，缺乏运动，不利于身体和心理的健康。<br>而记录日志，最大的好处就可以得到自己在各个方面的数据；</p>
<p><strong>最简单的饼图</strong> 对生活进行总的分类，并统计每个分类的时间占比</p>
<p><img src="/images/2015_5_20/pie.png" alt="饼图"></p>
<p><strong>通过Tag对生活进行细分</strong> 可以看做是分类下面的细分</p>
<p><img src="/images/2015_5_20/tag.png" alt="Tag图"></p>
<p><strong>时间投入变化趋势</strong></p>
<p><img src="/images/2015_5_20/trend.png" alt="时间投入变化趋势"></p>
<p>但是，软件提供的数据和图表只能是提供了一个自我优化的机制，但是能不能将数据所代表的意义，转化成生活中实际的行动，这个才是优化过程中最关键的点；而如果能够采取行动，把自己努力的过程用日志记录下来，每一天结束，或者一段时间之后便可以看到自己的努力所产生的在数据上的变化，而这种数据的正反馈正是一种鼓励，良性循环；而及时的负反馈则是一种警示，有了这样的机制，提高了打破和跳出恶性循环的可能性；</p>
<h3 id="记录了一段时间之后发现的问题">记录了一段时间之后发现的问题</h3><p>使用软件对自己进行一段时间的统计之后，发现了一些问题。</p>
<h5 id="一般事务时间比重大">一般事务时间比重大</h5><p> 每一天一般事务的时间比我想象的要多，吃饭，洗澡，交通，购物，看电视，信息漫游，都是无法避免的，既然这些时间是很难避免的，想办法去压缩这些时间，其实更好的做法是去享受这些时间，用心的去体验这部分时间，例如 我是走路下班，那我就专心的走路，关注自己肌肉的运动，做运动冥想，于是，走路下班的时间就显得更有价值了。</p>
<h5 id="一定要定期的Review">一定要定期的Review</h5><p>记录日志之后，会生成报表，如果不去看这些报表，其实所带来的警示作用还是不够强;  我上一段时间就是只是不停的记录日志，却不去看这些日志所生成的报表，也就和自己不记录的生活其实差别不大，因为我还是无法知道自己这段时间的实际时间投入是怎样的。也就无法对自己起到警示的作用；</p>
<p>更多问题待续</p>
<hr>
<p>附上界面截图</p>
<p><img src="/images/2015_5_20/screen.png" alt="界面截图"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>开发<a href="https://github.com/zhangmhao/Life-Time-Tracker" target="_blank" rel="external">Life Time Tracker</a>最初的源头来自于一本叫「<a href="http:]]>
    </summary>
    
      <category term="工具开发" scheme="http://zhangmhao.github.io/tags/%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91/"/>
    
      <category term="时间管理" scheme="http://zhangmhao.github.io/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
    
      <category term="设计文档" scheme="http://zhangmhao.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/"/>
    
      <category term="工具" scheme="http://zhangmhao.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[几点Javascript容易忽略的性能问题]]></title>
    <link href="http://zhangmhao.github.io/2015/03/31/%E5%85%B3%E4%BA%8EJavascript%E4%BB%A5%E5%89%8D%E5%BF%BD%E7%95%A5%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98/"/>
    <id>http://zhangmhao.github.io/2015/03/31/关于Javascript以前忽略的性能问题/</id>
    <published>2015-03-30T16:00:00.000Z</published>
    <updated>2015-09-22T14:13:48.000Z</updated>
    <content type="html"><![CDATA[<p>在看Airbnb的<a href="https://github.com/airbnb/javascript#performance" target="_blank" rel="external">JS代码规范</a>的时候，发现有一些以前忽略的性能点，在这里记下来，提醒自己细节对于性能的重要性。</p>
<p>注意，下面列举的一些数据，都是基于 Chrome 43.0.2342.2 dev (64-bit) , Apple - OS X Yosemite 环境下测试得到的;</p>
<h3 id="循环中的Try/Catch">循环中的Try/Catch</h3><p>Try/Catch是有一定的性能损耗的，特别是放在循环当中的时候更加明显<br><a href="http://jsperf.com/try-catch-in-loop-cost" target="_blank" rel="external">jsperf</a></p>
<h3 id="立即调用的函数表达式">立即调用的函数表达式</h3><p><code>立即调用的函数表达式</code>(Immediately-Invoked Function Expression) 有另外一个称呼叫 <code>自执行的匿名函数</code>（self-executing anonymous function）；</p>
<p>写法有多种多样，一般都是在匿名函数附近使用括号或一些一元运算符的惯用法，就是来引导解析器，指明运算符附近的匿名函数是一个<code>函数表达式(function expression)</code>。例如：</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ref: http://www.zhihu.com/question/20249179</span></span><br><span class="line">~ <span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="comment">&#123;&#125;</span><span class="params">()</span>;</span></span><br><span class="line">! <span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="comment">&#123;&#125;</span><span class="params">()</span>;</span></span><br><span class="line">+ <span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="comment">&#123;&#125;</span><span class="params">()</span>;</span></span><br><span class="line">- <span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="comment">&#123;&#125;</span><span class="params">()</span>;</span></span><br><span class="line"></span><br><span class="line">delete <span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="comment">&#123;&#125;</span><span class="params">()</span>;</span></span><br><span class="line">typeof <span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="comment">&#123;&#125;</span><span class="params">()</span>;</span></span><br><span class="line">void <span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="comment">&#123;&#125;</span><span class="params">()</span>;</span></span><br><span class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="comment">&#123;&#125;</span><span class="params">()</span>;</span></span><br><span class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="comment">&#123;&#125;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="comment">&#123;&#125;</span><span class="params">()</span>;</span></span><br><span class="line"><span class="number">1</span> ^ <span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="comment">&#123;&#125;</span><span class="params">()</span>;</span></span><br><span class="line"><span class="number">1</span> &gt; <span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="comment">&#123;&#125;</span><span class="params">()</span>;</span></span><br></pre></td></tr></table></figure>
<p>但是那么多种，哪一种的性能更加好呢？<a href="http://jsperf.com/bang-function" target="_blank" rel="external">jsperf</a>在我本机的测试结果是 <code>- function() {}();</code> 和 <code>~function() {}()</code> 较快;</p>
<h3 id="innerHTML,_textContent,_nodeValue">innerHTML, <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent" target="_blank" rel="external">textContent</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue" target="_blank" rel="external">nodeValue</a></h3><p><a href="http://jsperf.com/innerhtml-vs-textcontent-for-script-text" target="_blank" rel="external">jsPerf</a>在我本机的测试结果是 <code>innerHTML</code>性能最差，<br><code>textContent</code>次之, <code>nodeValue</code>性能最好</p>
<p>而在<code>textContent</code>的MDN的文档上也提到了这一点：</p>
<blockquote>
<p>textContent should be used instead. Because the text is not parsed as HTML, it’s likely to have better performance. Moreover, this avoids an XSS attack vector.</p>
</blockquote>
<h3 id="jQuery_Find_vs_Context,_Selector">jQuery Find vs Context, Selector</h3><p><a href="http://jsperf.com/jquery-find-vs-context-sel/13" target="_blank" rel="external">jsPerf</a>在我本机的测试结果显示：其中 <code>$(article).find(&#39;ins&#39;)</code> 最快， 而<code>$(&#39;ins&#39;, &#39;article&#39;)</code> 最慢</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//find method (node context)</span></span><br><span class="line"><span class="keyword">var</span> has = $(article).find(<span class="string">'ins'</span>).length &gt; <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//find method (jquery context)</span></span><br><span class="line"><span class="keyword">var</span> has = $($article).find(<span class="string">'ins'</span>).length &gt; <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//context node</span></span><br><span class="line"><span class="keyword">var</span> has = $(<span class="string">'ins'</span>, article).length &gt; <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//context jQuery</span></span><br><span class="line"><span class="keyword">var</span> has = $(<span class="string">'ins'</span>, $article).length &gt; <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//context jQuery[0]</span></span><br><span class="line"><span class="keyword">var</span> has = $(<span class="string">'ins'</span>, $article[<span class="number">0</span>]).length &gt; <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cascade</span></span><br><span class="line"><span class="keyword">var</span> has = $(<span class="string">'article ins'</span>).length &gt; <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//context (no cached)</span></span><br><span class="line"><span class="keyword">var</span> has = $(<span class="string">'ins'</span>, <span class="string">'article'</span>).length &gt; <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>
<h2 id="参考：">参考：</h2><ol>
<li><a href="http://www.zhihu.com/question/20249179" target="_blank" rel="external">http://www.zhihu.com/question/20249179</a></li>
<li><a href="https://github.com/airbnb/javascript#performance" target="_blank" rel="external">https://github.com/airbnb/javascript#performance</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>在看Airbnb的<a href="https://github.com/airbnb/javascript#performance" target="_blank" rel="external">JS代码规范</a>的时候，发现有一些以前忽略的性能点，在这里记下来，提醒自]]>
    </summary>
    
      <category term="javascript" scheme="http://zhangmhao.github.io/tags/javascript/"/>
    
      <category term="前端性能优化" scheme="http://zhangmhao.github.io/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="前端开发" scheme="http://zhangmhao.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Min和Max方法的实现和用法]]></title>
    <link href="http://zhangmhao.github.io/2015/03/24/Min-%E5%92%8C-Max%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%92%8C%E7%94%A8%E6%B3%95/"/>
    <id>http://zhangmhao.github.io/2015/03/24/Min-和-Max方法的实现和用法/</id>
    <published>2015-03-23T16:00:00.000Z</published>
    <updated>2015-09-22T14:14:28.000Z</updated>
    <content type="html"><![CDATA[<p>在开发中，取最小值和最大值是最常见的功能之一，在javascript中，提供了Math.min和Math.max两个方法。但使用的时候遇到一些问题</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">list</span> = [<span class="number">2</span>,<span class="number">4</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">9</span>]</span><br><span class="line">var min = Math.min(<span class="built_in">list</span>) <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>
<p>是的，返回的是NaN，查了文档之后发现 参数列表可以接收多个值，但是不是数组。如果参数中有一个值不是数字，那么就会返回NaN, 在上面的例子中，传入的是数组，所以返回的自然也是NaN。</p>
<p>所以只能使用apply来使用用法：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var <span class="built_in">list</span> = [<span class="number">2</span>,<span class="number">4</span>,-<span class="number">1</span>,<span class="number">0</span>,<span class="number">9</span>]</span><br><span class="line">var min = Math.min.apply(Math, <span class="built_in">list</span>); <span class="comment">//-1</span></span><br></pre></td></tr></table></figure>
<p>当然，实现方式不仅仅是只有调用Math模块，我们当然可以自己实现，下面探索一下几种实现方式</p>
<h3 id="实现1">实现1</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayMin</span><span class="params">(arr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span> <span class="params">(p, v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ( p &lt; v ? p : v );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrayMax</span><span class="params">(arr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span> <span class="params">(p, v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ( p &gt; v ? p : v );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现2">实现2</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span></span> arrayMin(arr) &#123;</span><br><span class="line">  var len = arr.length, <span class="built_in">min</span> = Infinity;</span><br><span class="line">  <span class="keyword">while</span> (len--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[len] &lt; <span class="built_in">min</span>) &#123;</span><br><span class="line">      <span class="built_in">min</span> = arr[len];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">min</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span></span> arrayMax(arr) &#123;</span><br><span class="line">  var len = arr.length, <span class="built_in">max</span> = -Infinity;</span><br><span class="line">  <span class="keyword">while</span> (len--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[len] &gt; <span class="built_in">max</span>) &#123;</span><br><span class="line">      <span class="built_in">max</span> = arr[len];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">max</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>###实现3:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//max</span></span><br><span class="line"><span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, array);</span><br><span class="line"></span><br><span class="line"><span class="comment">//min</span></span><br><span class="line"><span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, array);</span><br></pre></td></tr></table></figure>
<h3 id="underscore-js的实现">underscore.js的实现</h3><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// <span class="type">Return</span> the maximum element <span class="keyword">or</span> (element-based computation).</span><br><span class="line">// <span class="type">Can</span>'t optimize arrays <span class="keyword">of</span> integers longer than <span class="number">65</span>,<span class="number">535</span> elements.</span><br><span class="line">// <span class="type">See</span>: https://bugs.webkit.org/show_bug.cgi?id=<span class="number">80797</span></span><br><span class="line">_.max = function(obj, <span class="keyword">iterator</span>, context) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">iterator</span> &amp;&amp; _.isArray(obj) &amp;&amp; obj[<span class="number">0</span>] === +obj[<span class="number">0</span>] &amp;&amp; obj.length &lt; <span class="number">65535</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="type">Math</span>.max.apply(<span class="type">Math</span>, obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">iterator</span> &amp;&amp; _.isEmpty(obj)) <span class="keyword">return</span> -<span class="type">Infinity</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="literal">result</span> = &#123;computed : -<span class="type">Infinity</span>, value: -<span class="type">Infinity</span>&#125;;</span><br><span class="line">    each(obj, function(value, index, list) &#123;</span><br><span class="line">      <span class="keyword">var</span> computed = <span class="keyword">iterator</span> ? <span class="keyword">iterator</span>.call(context, value, index, list) : value;</span><br><span class="line">      computed &gt;= <span class="literal">result</span>.computed &amp;&amp; (<span class="literal">result</span> = &#123;value : value, computed : computed&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">result</span>.value;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>在开发中，取最小值和最大值是最常见的功能之一，在javascript中，提供了Math.min和Math.max两个方法。但使用的时候遇到一些问题</p>
<figure class="highlight cpp"><table><tr><td class="gutter"]]>
    </summary>
    
      <category term="javascript" scheme="http://zhangmhao.github.io/tags/javascript/"/>
    
      <category term="前端开发" scheme="http://zhangmhao.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[You Don't Know JS - this and Object Prototypes 读书笔记]]></title>
    <link href="http://zhangmhao.github.io/2015/03/10/You-don't-know-js--this-&-Object-Prototypes-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://zhangmhao.github.io/2015/03/10/You-don't-know-js--this-&-Object-Prototypes-读书笔记/</id>
    <published>2015-03-09T16:00:00.000Z</published>
    <updated>2015-09-22T14:20:09.000Z</updated>
    <content type="html"><![CDATA[<p>「<a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="external">You don’t konw js</a>」对于有一定编程经验，对javascript有足够开发经验的人来讲，这本书简直就是福音，javascript很有“群众基础 ”，但同时也是被误解最多的语言之一。对于我个人而言，在读这本书的过程中，才发现自己对javascript也有许多误解的地方，收益匪浅。另外，这本书在Github上的关注度非常高, 作者<a href="http://getify.me/" target="_blank" rel="external">Kyle Simpson</a>能将复杂的概念，用一种非常舒服的逻辑给你娓娓道来。</p>
<p>这一篇的笔记是记下阅读这个系列其中一半 <a href="https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&amp;%20object%20prototypes/README.md#you-dont-know-js-this--object-prototypes" target="_blank" rel="external">You Don’t Know JS: this &amp; Object Prototypes</a>，因为我只记下一些重要的点，所以，只是一篇读书摘录，不适合他人阅读。</p>
<h2 id="this_&amp;_Object_Prototypes">this &amp; Object Prototypes</h2><h3 id="this">this</h3><h4 id="4条规则">4条规则</h4><h5 id="1-_Default_Binding">1. Default Binding</h5><h5 id="2-_Implicit_Binding">2. Implicit Binding</h5><ul>
<li>Implicitly Lost<h5 id="3-_Explicit_Binding">3. Explicit Binding</h5></li>
<li>Hard Binding</li>
<li>API Call “Contexts”<h5 id="4-_new_Binding">4. new Binding</h5></li>
</ul>
<h4 id="4条规则的优先级">4条规则的优先级</h4><p><code>new  Binding</code> &gt; <code>explicit binding</code> &gt; <code>implicit binding</code> &gt; <code>default binding</code></p>
<h4 id="需要注意的点">需要注意的点</h4><h5 id="使用更加安全的this">使用更加安全的this</h5><p>在不需要上下文的情况下，使用null作为 apply, call, bind 的上下文环境参数是一个常见的做法, 例如可以用来传播参数</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> <span class="params">(a, b)</span> </span>&#123; <span class="keyword">return</span> a + b;&#125;</span><br><span class="line">foo.apply(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">//spread parameters</span></span><br></pre></td></tr></table></figure>
<p>但是这个做法并不安全，当为 null 的时候，this指向的是global(浏览器下是window); 更安全的做法是使用 <code>Object.create( null );</code> 创建一个空值;</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var ø =<span class="function"> Object.create(</span> null <span class="function">)</span>;// our DMZ empty object</span><br><span class="line">// spreading out<span class="instruction"> array </span>as parameters</span><br><span class="line">foo.apply( ø, <span class="keyword">[</span>2, 3] <span class="function">)</span>; // a:2, b:3</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Object">Object</h3><h4 id="javascript中的6种基本类型（Primary_Type）">javascript中的6种基本类型（Primary Type）</h4><ul>
<li>string</li>
<li>number</li>
<li>boolean</li>
<li>null</li>
<li>undefined</li>
<li>object</li>
</ul>
<blockquote>
<p>It’s a common mis-statement that “everything in JavaScript is an object”. This is clearly not true.</p>
</blockquote>
<p>函数 <code>function</code> 就是<code>object</code>的子类型，严格的叫法是<code>callable object</code>, 数组也是object的一种形式，只是多了一些其他的行为。</p>
<h4 id="内置对象（Built-in_Objects）">内置对象（Built-in Objects）</h4><ul>
<li><code>String</code></li>
<li><code>Number</code></li>
<li><code>Boolean</code></li>
<li><code>Object</code></li>
<li><code>Function</code></li>
<li><code>Array</code></li>
<li><code>Date</code></li>
<li><code>RegExp</code></li>
<li><code>Error</code></li>
</ul>
<h4 id="一些Object的细节点">一些Object的细节点</h4><h5 id="in_和_hasOwnProperty的区别">in 和 hasOwnProperty的区别</h5><p>in 会遍历原型链，而hasOwnProperty只限于object自身</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var myObject = &#123;</span><br><span class="line">    <span class="symbol">a:</span> <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">(<span class="string">"a"</span> <span class="keyword">in</span> myObject);              <span class="regexp">//</span> <span class="keyword">true</span></span><br><span class="line">(<span class="string">"b"</span> <span class="keyword">in</span> myObject);              <span class="regexp">//</span> <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">myObject.hasOwnProperty( <span class="string">"a"</span> ); <span class="regexp">//</span> <span class="keyword">true</span></span><br><span class="line">myObject.hasOwnProperty( <span class="string">"b"</span> ); <span class="regexp">//</span> <span class="keyword">false</span></span><br></pre></td></tr></table></figure>
<h5 id="可以枚举（Enumeration），不代表不能访问">可以枚举（Enumeration），不代表不能访问</h5><p>在js的定义中，「enumerable」 表示 </p>
<blockquote>
<p>will be included if the object’s properties are iterated through</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(</span><br><span class="line">    myObject,</span><br><span class="line">    <span class="string">"a"</span>,</span><br><span class="line">    <span class="comment">// make `a` enumerable, as normal</span></span><br><span class="line">    &#123; enumerable: <span class="literal">true</span>, value: <span class="number">2</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(</span><br><span class="line">    myObject,</span><br><span class="line">    <span class="string">"b"</span>,</span><br><span class="line">    <span class="comment">// make `b` NON-enumerable</span></span><br><span class="line">    &#123; enumerable: <span class="literal">false</span>, value: <span class="number">3</span> &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">myObject.b; <span class="comment">// 3</span></span><br><span class="line">(<span class="string">"b"</span> <span class="keyword">in</span> myObject); <span class="comment">// true</span></span><br><span class="line">myObject.hasOwnProperty( <span class="string">"b"</span> ); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// .......</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> myObject) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log( k, myObject[k] );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "a" 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys( myObject ); <span class="comment">// ["a"]</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames( myObject ); <span class="comment">// ["a", "b"]</span></span><br></pre></td></tr></table></figure>
<p>需要注意的是 <code>Object.keys(..)</code> 返回的是由当前对象可枚举的属性组成的数组; 而<code>Object.getOwnPropertyNames(..)</code>返回的是所有当前对象的属性，这里强调「当前对象」是因为 这两个函数不会遍历原型链的</p>
<hr>
<h3 id="Mixing_(Up)_“Class”_Objects">Mixing (Up) “Class” Objects</h3><p>这一章所讲的内容与之前理解的出入不大，所以不做过多的摘录，记下一些有启发的观点</p>
<p><strong> oo其实只是一种代码组织形式，并非唯一的选择</strong></p>
<blockquote>
<p> if you have experience with “functional programming” (Monads, etc.), you know very well that classes are just one of several common design patterns. But for others, this may be the first time you’ve asked yourself if classes really are a fundamental foundation for code, or if they are an optional abstraction on top of code.<br>Some languages (like Java) don’t give you the choice, so it’s not very optional at all – everything’s a class. Other languages like C/C++ or PHP give you a both procedural and class-oriented syntaxes, and it’s left more to the developer’s choice which style or mixture of styles is appropriate.</p>
</blockquote>
<p>在ES6之后， javascript增加了<code>class</code>的定义，但是否意味着javascript有了类呢？最简单的回答： No!</p>
<p>可以总结一句来说：就是在js中去模仿类继承的机制，也许可以解决问题，但经常也给后面埋下地雷。因为你在javascript假装出来的类机制和其他语言中的类机制是不一样的。</p>
<blockquote>
<p>JavaScript’s object mechanism does not automatically perform copy behavior when you “inherit” or “instantiate”. Plainly, there’s no “classes” in JavaScript to instantiate, only objects. And objects don’t get copied to other objects, they get linked together</p>
</blockquote>
<hr>
<h3 id="Prototype">Prototype</h3><p>Objects in JavaScript have an internal property, denoted in the specification as [[Prototype]], which is simply a reference to another object. </p>
<p>If you use the in operator to test for the existence of a property on an object, in will check the entire chain of the object (regardless of enumerability).</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anotherObject = &#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create an object linked to `anotherObject`</span></span><br><span class="line"><span class="keyword">var</span> myObject = <span class="built_in">Object</span>.create( anotherObject );</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> myObject) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"found: "</span> + k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// found: a</span></span><br><span class="line"></span><br><span class="line">(<span class="string">"a"</span> <span class="keyword">in</span> myObject); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h4 id="需要注意的地方">需要注意的地方</h4><h5 id="引用">引用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anotherObject = &#123;</span><br><span class="line">    b: [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myObject = <span class="built_in">Object</span>.create( anotherObject );</span><br><span class="line"></span><br><span class="line">anotherObject.hasOwnProperty( <span class="string">"b"</span> ); <span class="comment">// true</span></span><br><span class="line">myObject.hasOwnProperty( <span class="string">"b"</span> ); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">myObject.b.push(<span class="number">3</span>);</span><br><span class="line">anotherObject.b; <span class="comment">// [1,2,3]</span></span><br><span class="line">myObject.b; <span class="comment">// [1,2,3]</span></span><br><span class="line"></span><br><span class="line">myObject.hasOwnProperty( <span class="string">"b"</span> ); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>修改<code>myObject.b</code> , 由于my object没有这个值，会继续查找其原型，所以其实是在修改 <code>anotherObject.b</code></p>
<h5 id="Shadowing">Shadowing</h5><p>下面例子与上面的区别就是a是一个number，像这种基础类型(Number,String)的值会发生什么情况呢？</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> anotherObject</span> = &#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable"><span class="keyword">var</span> myObject</span> = Object.create( anotherObject );</span><br><span class="line"></span><br><span class="line">anotherObject.a; <span class="comment">// 2</span></span><br><span class="line">myObject.a; <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">anotherObject.hasOwnProperty( <span class="string">"a"</span> ); <span class="comment">// true</span></span><br><span class="line">myObject.hasOwnProperty( <span class="string">"a"</span> ); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">myObject.a++; <span class="comment">// oops, implicit shadowing!</span></span><br><span class="line"></span><br><span class="line">anotherObject.a; <span class="comment">// 2</span></span><br><span class="line">myObject.a; <span class="comment">// 3</span></span><br><span class="line">myObject.hasOwnProperty( <span class="string">"a"</span> ); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p><code>myObject.a++</code>执行的过程：先从原型取出值，加完之后赋值给 <code>myObject.a</code></p>
<p>那么如果是对于设置了read_only的属性呢？</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anotherObject = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype, &#123;</span><br><span class="line">    a: &#123;</span><br><span class="line">        writable: <span class="keyword">false</span>,</span><br><span class="line">        value: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myObject = <span class="built_in">Object</span>.create(anotherObject);</span><br><span class="line"></span><br><span class="line">anotherObject.hasOwnProperty( <span class="string">"a"</span> ); <span class="comment">// true</span></span><br><span class="line">myObject.hasOwnProperty( <span class="string">"a"</span> ); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">myObject.a++;</span><br><span class="line"></span><br><span class="line">anotherObject.a; <span class="comment">// 2</span></span><br><span class="line">myObject.a; <span class="comment">// 2</span></span><br><span class="line">myObject.hasOwnProperty( <span class="string">"a"</span> ); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>如果是在<code>use strict</code>严格模式下，这段代码是会报错的,错误信息是:</p>
<p><code>Uncaught TypeError: Cannot assign to read only property &#39;a&#39; of #&lt;Object&gt;</code></p>
<h4 id="Object-prototype">Object.prototype</h4><p>But where exactly does the [[Prototype]] chain “end”?<br>原形链的终点是 <code>Object.prototype</code>  因为在javascript中，所有的对象都是继承自<code>Object.prototype</code></p>
<h4 id="设置Object的值">设置Object的值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anotherObject = &#123;</span><br><span class="line">    a: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myObject = <span class="built_in">Object</span>.create( anotherObject );</span><br><span class="line"></span><br><span class="line">anotherObject.a; <span class="comment">// 2</span></span><br><span class="line">myObject.a; <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">anotherObject.hasOwnProperty( <span class="string">"a"</span> ); <span class="comment">// true</span></span><br><span class="line">myObject.hasOwnProperty( <span class="string">"a"</span> ); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">myObject.a++; <span class="comment">// oops, implicit shadowing!</span></span><br><span class="line"></span><br><span class="line">anotherObject.a; <span class="comment">// 2</span></span><br><span class="line">myObject.a; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">myObject.hasOwnProperty( <span class="string">"a"</span> ); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Be very careful when dealing with delegated properties that you modify. If you wanted to increment anotherObject.a, the only proper way is anotherObject.a++.</span></span><br></pre></td></tr></table></figure>
<h4 id="容易混乱的地方">容易混乱的地方</h4><h5 id="prototype"><code>prototype</code></h5><p><code>[[prototype]]</code>和 <code>prototype</code>的区别</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* */</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Foo的[[prototype]]是 Function.prototype</span></span><br><span class="line">Foo.__proto__ === <span class="built_in">Function</span>.prototype; <span class="comment">//true</span></span><br><span class="line"><span class="comment">//也可以通过Object.getPrototypeOf来获取[[prototype]]</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(Foo) === <span class="built_in">Function</span>.prototype; <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="comment">//a的[[prototype]]是 Foo.prototype</span></span><br><span class="line">a.__proto__ === Foo.prototype;<span class="comment">// true</span></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(a) === Foo.prototype; <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h5 id="Functions_不是「构造函数」">Functions 不是「构造函数」</h5><blockquote>
<p>Functions aren’t constructors, but function calls are “constructor calls” if and only if new is used.</p>
<p>This is just unfortunate confusion. In actuality, the .constructor reference is also delegated up to Foo.prototype, which happens to, by default, have a .constructor that points at Foo.</p>
</blockquote>
<p>Foo.prototype.constructor  === Foo 只有通过定义function的时候才会自动创建这个关系，如果改变了Foo.prototype,  创建出来的对象的constructor就不是Foo了，这个很好的表明了Foo不是构造函数的这个概念；</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* .. */</span> &#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype = &#123; <span class="comment">/* .. */</span> &#125;; <span class="comment">// create a new prototype object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a1 = <span class="keyword">new</span> Foo();</span><br><span class="line">a1.constructor === Foo; <span class="comment">// false!</span></span><br><span class="line">a1.constructor === <span class="built_in">Object</span>; <span class="comment">// true!</span></span><br></pre></td></tr></table></figure>
<p>为什么 <code>a1.constructor</code> 会变成 <code>Object</code> 呢？ 我直接摘录下书中的介绍</p>
<blockquote>
<p>What’s happening? a1 has no .constructor property, so it delegates up the [[Prototype]] chain to Foo.prototype. But that object doesn’t have a .constructor either (like the default Foo.prototype object would have had!), so it keeps delegating, this time up to Object.prototype, the top of the delegation chain. That object indeed has a .constructor on it, which points to the built-in Object(..) function.</p>
</blockquote>
<p>如果要还原constructor的默认行为，需要许多人工操作</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* .. */</span> &#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype = &#123; <span class="comment">/* .. */</span> &#125;; <span class="comment">// create a new prototype object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Need to properly "fix" the missing `.constructor`</span></span><br><span class="line"><span class="comment">// property on the new object serving as `Foo.prototype`.</span></span><br><span class="line"><span class="comment">// See Chapter 3 for `defineProperty(..)`.</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty( Foo.prototype, <span class="string">"constructor"</span> , &#123;</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    value: Foo    <span class="comment">// point `.constructor` at `Foo`</span></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong> <code>a1.constructor</code> is extremely unreliable, and an unsafe reference to rely upon in your code. Generally, such references should be avoided where possible.</strong></p>
</blockquote>
<h4 id="模拟继承">模拟继承</h4><p>在js中，class 的继承一般是这样子实现的：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Foo.prototype.myName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params">name,label</span>) </span>&#123;</span><br><span class="line">    Foo.call( <span class="keyword">this</span>, name );</span><br><span class="line">    <span class="keyword">this</span>.label = label;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// here, we make a new `Bar.prototype`</span></span><br><span class="line"><span class="comment">// linked to `Foo.prototype`</span></span><br><span class="line">Bar.prototype = <span class="built_in">Object</span>.create( Foo.prototype );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Beware! Now `Bar.prototype.constructor` is gone,</span></span><br><span class="line"><span class="comment">// and might need to be manually "fixed" if you're</span></span><br><span class="line"><span class="comment">// in the habit of relying on such properties!</span></span><br><span class="line"></span><br><span class="line">Bar.prototype.myLabel = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.label;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Bar( <span class="string">"a"</span>, <span class="string">"obj a"</span> );</span><br><span class="line"></span><br><span class="line">a.myName(); <span class="comment">// "a"</span></span><br><span class="line">a.myLabel(); <span class="comment">// "obj a"</span></span><br></pre></td></tr></table></figure>
<p>而为什么不能直接 <code>Bar.prototype = Foo.prototype</code>; 因为修改 <code>Bar.prototype</code>的时候也会影响 <code>Foo.prototype</code>， 进而影响所有关联了<code>Foo.prototype</code>的对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// doesn't work like you want!</span></span><br><span class="line">Bar.prototype = Foo.prototype;</span><br><span class="line"></span><br><span class="line"><span class="comment">// works kinda like you want, but with</span></span><br><span class="line"><span class="comment">// side-effects you probably don't want :(</span></span><br><span class="line">Bar.prototype = <span class="keyword">new</span> Foo();</span><br></pre></td></tr></table></figure>
<p><code>Bar.prototype = new Foo();</code> 由于<code>new Foo()</code>是一个「constructor call」,会执行Foo函数体，进而造成一些不必要的影响, 例如对this进行意外的修改，或者Foo是一个高耗时的函数而影响了Bar的性能</p>
<p>由于继承实在是太过于常见了，所以ES6提供了一個工具函数来实现继承</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.setPrototypeOf( Bar.prototype, Foo.prototype );</span><br></pre></td></tr></table></figure>
<h4 id="查看“继承”关系">查看“继承”关系</h4><p>两个对象之间的关系</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Simply: does `b` appear anywhere in</span></span><br><span class="line"><span class="comment">// `c`s [[Prototype]] chain?</span></span><br><span class="line">b.isPrototypeOf( c );</span><br></pre></td></tr></table></figure>
<p>在 ES5中，我们可以使用 <code>Object.getPrototypeOf</code> 来查看关系</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getPrototypeOf( a ) === Foo.prototype; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>也可以使用<code>__proto__</code>,不过这个不是所有浏览器都支持</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.__proto__ === <span class="constant">Foo</span>.prototype; <span class="regexp">//</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="Object_Links">Object Links</h4><h5 id="Object-create()_is_a_hero"><code>Object.create()</code> is a hero</h5><blockquote>
<p>Object.create(..) creates a new object (bar) linked to the object we specified (foo), which gives us all the power (delegation) of the [[Prototype]] mechanism, but without any of the unnecessary complication of new functions acting as classes and constructor calls, confusing .prototype and .constructor references, or any of that extra stuff.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    something: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">"Tell me something good..."</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="built_in">Object</span>.create( foo );</span><br><span class="line"></span><br><span class="line">bar.something(); <span class="comment">// Tell me something good...</span></span><br></pre></td></tr></table></figure>
<p>备注： <code>Object.create(null)</code> 创建出来的对象的<code>[[prototype]]</code>是null， 也就是没有原型链,  因为其「纯洁」性，我们可以用来创建字典(Dictionaries)而不必考虑原型链的影响而取到字典里不存在的值。</p>
<p>如果浏览器不支持<code>Object.create()</code>， 即ES5之前的版本，则需要提供一个兼容措施(Polyfilled)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Object</span>.create) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.create = <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        F.prototype = o;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="总结">总结</h4><p>过去面向对象所用的一些术语是难以适用于js的世界的，<code>delegation</code>更合适用来描述js中的「原型继承」(<code>prototypal inheritance</code>);</p>
<blockquote>
<p>For a variety of reasons, not the least of which is terminology precedent, “inheritance” (and “prototypal inheritance”) and all the other OO terms just do not make sense when considering how JavaScript actually works (not just applied to our forced mental models). Instead, “<strong>delegation</strong>“ is a more appropriate term, because these relationships are <strong>not copies but delegation links.</strong></p>
</blockquote>
<hr>
<p>原文链接:  <a href="https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&amp;%20object%20prototypes/ch5.md" target="_blank" rel="external">https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&amp;%20object%20prototypes/ch5.md</a></p>
<h3 id="Behavior_Delegation"><a href="https://github.com/getify/You-Dont-Know-JS/blob/master/this%20&amp;%20object%20prototypes/ch6.md" target="_blank" rel="external">Behavior Delegation</a></h3><blockquote>
<p> Let’s now dig into how we could and should be thinking about the object [[Prototype]] mechanism in JS, in a much simpler and more straightforward way than the confusion of classes.</p>
</blockquote>
<h4 id="Delegation-Oriented_Design">Delegation-Oriented Design</h4><p>如何用 <code>behavior delegation</code> 的方式来进行思考? 下面的例子不同于传统用<code>类</code>来进行思考</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Task = &#123;</span><br><span class="line">    setID: <span class="function"><span class="keyword">function</span>(<span class="params">ID</span>) </span>&#123; <span class="keyword">this</span>.id = ID; &#125;,</span><br><span class="line">    outputID: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log( <span class="keyword">this</span>.id ); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// make `XYZ` delegate to `Task`</span></span><br><span class="line">XYZ = <span class="built_in">Object</span>.create( Task );</span><br><span class="line"></span><br><span class="line">XYZ.prepareTask = <span class="function"><span class="keyword">function</span>(<span class="params">ID,Label</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setID( ID );</span><br><span class="line">    <span class="keyword">this</span>.label = Label;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">XYZ.outputTaskDetails = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.outputID();</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.label );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，<code>Task</code> 和 <code>XYZ</code> 不是<em>class</em>, 它们只是对象。</p>
<blockquote>
<p>In JavaScript, the [[Prototype]] mechanism links objects to other objects. There are no abstract mechanisms like “classes”, no matter how much you try to convince yourself otherwise. </p>
</blockquote>
<p>作者将这种方式称之为 <code>OLOO</code> (objects-linked-to-other-objects)， 这种和之前的类继承有以下区别：</p>
<ul>
<li>在类继承中，我们会写同名的函数，然后重写，而在<code>OOLO</code>中, 是相反过来的，函数是不重名的。对象的行为通过命名来进行区分，这样其实是可以提高代码的可读性的。</li>
<li>由于this的机制，当调用<code>prepareTask</code>的时候会调用 <code>this.setID(ID)</code>,  按照原型链机制，会找到Task上的setID方法，虽然setID不在XYZ上，但是this是指向 <code>XYZ</code>, 所以当后面运行 <code>this.outputID()</code>的时候可以看到输出是 我们设置的ID值</li>
</ul>
<blockquote>
<p><strong>Behavior Delegation</strong> means: let some object (XYZ) provide a delegation (to Task) for property or method references if not found on the object (XYZ).</p>
</blockquote>
<p>通过更多的例子来进一步解释</p>
<p><strong>OO</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.me = who;</span><br><span class="line">&#125;</span><br><span class="line">Foo.prototype.identify = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"I am "</span> + <span class="keyword">this</span>.me;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Bar</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">    Foo.call( <span class="keyword">this</span>, who );</span><br><span class="line">&#125;</span><br><span class="line">Bar.prototype = <span class="built_in">Object</span>.create( Foo.prototype );</span><br><span class="line"></span><br><span class="line">Bar.prototype.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert( <span class="string">"Hello, "</span> + <span class="keyword">this</span>.identify() + <span class="string">"."</span> );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b1 = <span class="keyword">new</span> Bar( <span class="string">"b1"</span> );</span><br><span class="line"><span class="keyword">var</span> b2 = <span class="keyword">new</span> Bar( <span class="string">"b2"</span> );</span><br><span class="line"></span><br><span class="line">b1.speak();</span><br><span class="line">b2.speak();</span><br></pre></td></tr></table></figure>
<p><strong>OLOO</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Foo = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">who</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.me = who;</span><br><span class="line">    &#125;,</span><br><span class="line">    identify: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"I am "</span> + <span class="keyword">this</span>.me;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Bar = <span class="built_in">Object</span>.create( Foo );</span><br><span class="line"></span><br><span class="line">Bar.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert( <span class="string">"Hello, "</span> + <span class="keyword">this</span>.identify() + <span class="string">"."</span> );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b1 = <span class="built_in">Object</span>.create( Bar );</span><br><span class="line">b1.init( <span class="string">"b1"</span> );</span><br><span class="line"><span class="keyword">var</span> b2 = <span class="built_in">Object</span>.create( Bar );</span><br><span class="line">b2.init( <span class="string">"b2"</span> );</span><br><span class="line"></span><br><span class="line">b1.speak();</span><br><span class="line">b2.speak();</span><br></pre></td></tr></table></figure>
<p><code>OLOO</code>和 <code>OO</code> 相比，没有了构造函数，new这些概念，更加简单，看更加实际的应用场景，看看classes和 object 的区别, 这里使用书中提到的 UI （Button）</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// Parent class</span><br><span class="line"><span class="keyword">function</span> Widget(width,height) &#123;</span><br><span class="line">    this.width = width || <span class="number">50</span>;</span><br><span class="line">    this.height = height || <span class="number">50</span>;</span><br><span class="line">    this.<span class="variable">$elem</span> = null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget.prototype.render = <span class="keyword">function</span>(<span class="variable">$where</span>)&#123;</span><br><span class="line">    if (this.<span class="variable">$elem</span>) &#123;</span><br><span class="line">        this.<span class="variable">$elem</span>.css( &#123;</span><br><span class="line">            width: this.width + <span class="string">"px"</span>,</span><br><span class="line">            height: this.height + <span class="string">"px"</span></span><br><span class="line">        &#125; ).appendTo( <span class="variable">$where</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// Child class</span><br><span class="line"><span class="keyword">function</span> Button(width,height,label) &#123;</span><br><span class="line">    // <span class="string">"super"</span> constructor call</span><br><span class="line">    Widget.call( this, width, height );</span><br><span class="line">    this.label = label || <span class="string">"Default"</span>;</span><br><span class="line"></span><br><span class="line">    this.<span class="variable">$elem</span> = $( <span class="string">"&lt;button&gt;"</span> ).text( this.label );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// make `Button` <span class="string">"inherit"</span> from `Widget`</span><br><span class="line">Button.prototype = Object.create( Widget.prototype );</span><br><span class="line"></span><br><span class="line">// override base <span class="string">"inherited"</span> `render(..)`</span><br><span class="line">Button.prototype.render = <span class="keyword">function</span>(<span class="variable">$where</span>) &#123;</span><br><span class="line">    // <span class="string">"super"</span> call</span><br><span class="line">    Widget.prototype.render.call( this, <span class="variable">$where</span> );</span><br><span class="line">    this.<span class="variable">$elem</span>.click( this.onClick.bind( this ) );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Button.prototype.onClick = <span class="keyword">function</span>(evt) &#123;</span><br><span class="line">    console.log( <span class="string">"Button '"</span> + this.label + <span class="string">"' clicked!"</span> );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$( document ).ready( <span class="keyword">function</span>()&#123;</span><br><span class="line">    var <span class="variable">$body</span> = $( document.body );</span><br><span class="line">    var btn1 = new Button( <span class="number">125</span>, <span class="number">30</span>, <span class="string">"Hello"</span> );</span><br><span class="line">    var btn2 = new Button( <span class="number">150</span>, <span class="number">40</span>, <span class="string">"World"</span> );</span><br><span class="line"></span><br><span class="line">    btn1.render( <span class="variable">$body</span> );</span><br><span class="line">    btn2.render( <span class="variable">$body</span> );</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure>
<p>上面的例子实在是有点麻烦，对吧，如果使用ES6来实现会简单，也更加流畅</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Widget &#123;</span><br><span class="line">    <span class="constructor"><span class="keyword">constructor</span>(width,height) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.width = width || <span class="number">50</span>;</span><br><span class="line">        <span class="keyword">this</span>.height = height || <span class="number">50</span>;</span><br><span class="line">        <span class="keyword">this</span>.$elem = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    render($where)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.$elem) &#123;</span><br><span class="line">            <span class="keyword">this</span>.$elem.css( &#123;</span><br><span class="line">                width: <span class="keyword">this</span>.width + <span class="string">"px"</span>,</span><br><span class="line">                height: <span class="keyword">this</span>.height + <span class="string">"px"</span></span><br><span class="line">            &#125; ).appendTo( $where );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Button extends Widget &#123;</span><br><span class="line">    <span class="constructor"><span class="keyword">constructor</span>(width,height,label) </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>( width, height );</span><br><span class="line">        <span class="keyword">this</span>.label = label || <span class="string">"Default"</span>;</span><br><span class="line">        <span class="keyword">this</span>.$elem = $( <span class="string">"&lt;button&gt;"</span> ).text( <span class="keyword">this</span>.label );</span><br><span class="line">    &#125;</span><br><span class="line">    render($where) &#123;</span><br><span class="line">        <span class="keyword">super</span>( $where );</span><br><span class="line">        <span class="keyword">this</span>.$elem.click( <span class="keyword">this</span>.onClick.bind( <span class="keyword">this</span> ) );</span><br><span class="line">    &#125;</span><br><span class="line">    onClick(evt) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">"Button '"</span> + <span class="keyword">this</span>.label + <span class="string">"' clicked!"</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$( <span class="built_in">document</span> ).ready( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $body = $( <span class="built_in">document</span>.body );</span><br><span class="line">    <span class="keyword">var</span> btn1 = <span class="keyword">new</span> Button( <span class="number">125</span>, <span class="number">30</span>, <span class="string">"Hello"</span> );</span><br><span class="line">    <span class="keyword">var</span> btn2 = <span class="keyword">new</span> Button( <span class="number">150</span>, <span class="number">40</span>, <span class="string">"World"</span> );</span><br><span class="line"></span><br><span class="line">    btn1.render( $body );</span><br><span class="line">    btn2.render( $body );</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure>
<p>尽管有了<code>class</code>， <code>super</code>等语法的辅助，但是这些依旧是不是真正的classes，依旧是基于原型链的机制。 只要选择了这种方式，尽管写起来容易了，但是依旧会碰到前几章提到的在js中模拟类继承遇到的各种头痛的问题，是要叫“智商税”的。</p>
<p>换成oloo来实现</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">var Widget = &#123;</span><br><span class="line">    init: function(width,height)&#123;</span><br><span class="line">        this.width = width || <span class="number">50</span>;</span><br><span class="line">        this.height = height || <span class="number">50</span>;</span><br><span class="line">        this.<span class="variable">$elem</span> = null;</span><br><span class="line">    &#125;,</span><br><span class="line">    insert: function(<span class="variable">$where</span>)&#123;</span><br><span class="line">        if (this.<span class="variable">$elem</span>) &#123;</span><br><span class="line">            this.<span class="variable">$elem</span>.css( &#123;</span><br><span class="line">                width: this.width + <span class="string">"px"</span>,</span><br><span class="line">                height: this.height + <span class="string">"px"</span></span><br><span class="line">            &#125; ).appendTo( <span class="variable">$where</span> );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var Button = Object.create( Widget );</span><br><span class="line"></span><br><span class="line">Button.setup = <span class="keyword">function</span>(width,height,label)&#123;</span><br><span class="line">    // delegated call</span><br><span class="line">    this.init( width, height );</span><br><span class="line">    this.label = label || <span class="string">"Default"</span>;</span><br><span class="line"></span><br><span class="line">    this.<span class="variable">$elem</span> = $( <span class="string">"&lt;button&gt;"</span> ).text( this.label );</span><br><span class="line">&#125;;</span><br><span class="line">Button.build = <span class="keyword">function</span>(<span class="variable">$where</span>) &#123;</span><br><span class="line">    // delegated call</span><br><span class="line">    this.insert( <span class="variable">$where</span> );</span><br><span class="line">    this.<span class="variable">$elem</span>.click( this.onClick.bind( this ) );</span><br><span class="line">&#125;;</span><br><span class="line">Button.onClick = <span class="keyword">function</span>(evt) &#123;</span><br><span class="line">    console.log( <span class="string">"Button '"</span> + this.label + <span class="string">"' clicked!"</span> );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$( document ).ready( <span class="keyword">function</span>()&#123;</span><br><span class="line">    var <span class="variable">$body</span> = $( document.body );</span><br><span class="line"></span><br><span class="line">    var btn1 = Object.create( Button );</span><br><span class="line">    btn1.setup( <span class="number">125</span>, <span class="number">30</span>, <span class="string">"Hello"</span> );</span><br><span class="line"></span><br><span class="line">    var btn2 = Object.create( Button );</span><br><span class="line">    btn2.setup( <span class="number">150</span>, <span class="number">40</span>, <span class="string">"World"</span> );</span><br><span class="line"></span><br><span class="line">    btn1.build( <span class="variable">$body</span> );</span><br><span class="line">    btn2.build( <span class="variable">$body</span> );</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure>
<p>注意，函数名是不同名的，我个人认为这种更加符合实际的情形，也让模型更加合理，同时也提高了可读性。</p>
<blockquote>
<p>With this OLOO-style approach, we don’t think of Widget as a parent and Button as a child. Rather, Widget is just an object and is sort of a utility collection that any specific type of widget might want to delegate to, and Button is also just a stand-alone object (with a delegation link to Widget, of course!).</p>
</blockquote>
<p>拿书中一个更加复杂的例子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Parent class</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Controller</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.errors = [];</span><br><span class="line">&#125;</span><br><span class="line">Controller.prototype.showDialog = <span class="function"><span class="keyword">function</span>(<span class="params">title,msg</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// display title &amp; message to user in dialog</span></span><br><span class="line">&#125;;</span><br><span class="line">Controller.prototype.success = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.showDialog( <span class="string">"Success"</span>, msg );</span><br><span class="line">&#125;;</span><br><span class="line">Controller.prototype.failure = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.errors.push( err );</span><br><span class="line">    <span class="keyword">this</span>.showDialog( <span class="string">"Error"</span>, err );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Child class</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LoginController</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Controller.call( <span class="keyword">this</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Link child class to parent</span></span><br><span class="line">LoginController.prototype = <span class="built_in">Object</span>.create( Controller.prototype );</span><br><span class="line">LoginController.prototype.getUser = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.getElementById( <span class="string">"login_username"</span> ).value;</span><br><span class="line">&#125;;</span><br><span class="line">LoginController.prototype.getPassword = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.getElementById( <span class="string">"login_password"</span> ).value;</span><br><span class="line">&#125;;</span><br><span class="line">LoginController.prototype.validateEntry = <span class="function"><span class="keyword">function</span>(<span class="params">user,pw</span>) </span>&#123;</span><br><span class="line">    user = user || <span class="keyword">this</span>.getUser();</span><br><span class="line">    pw = pw || <span class="keyword">this</span>.getPassword();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!(user &amp;&amp; pw)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.failure( <span class="string">"Please enter a username &amp; password!"</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pw.length &lt; <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.failure( <span class="string">"Password must be 5+ characters!"</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// got here? validated!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Override to extend base `failure()`</span></span><br><span class="line">LoginController.prototype.failure = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// "super" call</span></span><br><span class="line">    Controller.prototype.failure.call( <span class="keyword">this</span>, <span class="string">"Login invalid: "</span> + err );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Child class</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AuthController</span>(<span class="params">login</span>) </span>&#123;</span><br><span class="line">    Controller.call( <span class="keyword">this</span> );</span><br><span class="line">    <span class="comment">// in addition to inheritance, we also need composition</span></span><br><span class="line">    <span class="keyword">this</span>.login = login;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Link child class to parent</span></span><br><span class="line">AuthController.prototype = <span class="built_in">Object</span>.create( Controller.prototype );</span><br><span class="line">AuthController.prototype.server = <span class="function"><span class="keyword">function</span>(<span class="params">url,data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $.ajax( &#123;</span><br><span class="line">        url: url,</span><br><span class="line">        data: data</span><br><span class="line">    &#125; );</span><br><span class="line">&#125;;</span><br><span class="line">AuthController.prototype.checkAuth = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="keyword">this</span>.login.getUser();</span><br><span class="line">    <span class="keyword">var</span> pw = <span class="keyword">this</span>.login.getPassword();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.login.validateEntry( user, pw )) &#123;</span><br><span class="line">        <span class="keyword">this</span>.server( <span class="string">"/check-auth"</span>,&#123;</span><br><span class="line">            user: user,</span><br><span class="line">            pw: pw</span><br><span class="line">        &#125; )</span><br><span class="line">        .then( <span class="keyword">this</span>.success.bind( <span class="keyword">this</span> ) )</span><br><span class="line">        .fail( <span class="keyword">this</span>.failure.bind( <span class="keyword">this</span> ) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Override to extend base `success()`</span></span><br><span class="line">AuthController.prototype.success = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// "super" call</span></span><br><span class="line">    Controller.prototype.success.call( <span class="keyword">this</span>, <span class="string">"Authenticated!"</span> );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Override to extend base `failure()`</span></span><br><span class="line">AuthController.prototype.failure = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// "super" call</span></span><br><span class="line">    Controller.prototype.failure.call( <span class="keyword">this</span>, <span class="string">"Auth Failed: "</span> + err );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> auth = <span class="keyword">new</span> AuthController(</span><br><span class="line">    <span class="comment">// in addition to inheritance, we also need composition</span></span><br><span class="line">    <span class="keyword">new</span> LoginController()</span><br><span class="line">);</span><br><span class="line">auth.checkAuth();</span><br></pre></td></tr></table></figure>
<p>使用<code>oloo</code>的方式来实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> LoginController = &#123;</span><br><span class="line">    errors: [],</span><br><span class="line">    getUser: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.getElementById( <span class="string">"login_username"</span> ).value;</span><br><span class="line">    &#125;,</span><br><span class="line">    getPassword: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.getElementById( <span class="string">"login_password"</span> ).value;</span><br><span class="line">    &#125;,</span><br><span class="line">    validateEntry: <span class="function"><span class="keyword">function</span>(<span class="params">user,pw</span>) </span>&#123;</span><br><span class="line">        user = user || <span class="keyword">this</span>.getUser();</span><br><span class="line">        pw = pw || <span class="keyword">this</span>.getPassword();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(user &amp;&amp; pw)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.failure( <span class="string">"Please enter a username &amp; password!"</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pw.length &lt; <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.failure( <span class="string">"Password must be 5+ characters!"</span> );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// got here? validated!</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    showDialog: <span class="function"><span class="keyword">function</span>(<span class="params">title,msg</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// display success message to user in dialog</span></span><br><span class="line">    &#125;,</span><br><span class="line">    failure: <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.errors.push( err );</span><br><span class="line">        <span class="keyword">this</span>.showDialog( <span class="string">"Error"</span>, <span class="string">"Login invalid: "</span> + err );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Link `AuthController` to delegate to `LoginController`</span></span><br><span class="line"><span class="keyword">var</span> AuthController = <span class="built_in">Object</span>.create( LoginController );</span><br><span class="line"></span><br><span class="line">AuthController.errors = [];</span><br><span class="line">AuthController.checkAuth = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="keyword">this</span>.getUser();</span><br><span class="line">    <span class="keyword">var</span> pw = <span class="keyword">this</span>.getPassword();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.validateEntry( user, pw )) &#123;</span><br><span class="line">        <span class="keyword">this</span>.server( <span class="string">"/check-auth"</span>,&#123;</span><br><span class="line">            user: user,</span><br><span class="line">            pw: pw</span><br><span class="line">        &#125; )</span><br><span class="line">        .then( <span class="keyword">this</span>.accepted.bind( <span class="keyword">this</span> ) )</span><br><span class="line">        .fail( <span class="keyword">this</span>.rejected.bind( <span class="keyword">this</span> ) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">AuthController.server = <span class="function"><span class="keyword">function</span>(<span class="params">url,data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $.ajax( &#123;</span><br><span class="line">        url: url,</span><br><span class="line">        data: data</span><br><span class="line">    &#125; );</span><br><span class="line">&#125;;</span><br><span class="line">AuthController.accepted = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.showDialog( <span class="string">"Success"</span>, <span class="string">"Authenticated!"</span> )</span><br><span class="line">&#125;;</span><br><span class="line">AuthController.rejected = <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.failure( <span class="string">"Auth Failed: "</span> + err );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="总结-1">总结</h4><blockquote>
<p>Classes and inheritance are a design pattern you can choose, or not choose, in your software architecture.</p>
</blockquote>
<p><code>OO</code>只是一种软件架构，在js中，不是唯一的手段，<code>OLOO</code> 是另外一种更加简单的方式。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>「<a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="external">You don’t konw js</a>」对于有一定编程经验，对javascript有足够开发经验的人]]>
    </summary>
    
      <category term="javascript" scheme="http://zhangmhao.github.io/tags/javascript/"/>
    
      <category term="编程语言" scheme="http://zhangmhao.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="读书笔记" scheme="http://zhangmhao.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Node-wekit开发桌面程序总结]]></title>
    <link href="http://zhangmhao.github.io/2015/01/26/node-webkit%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E6%80%BB%E7%BB%93/"/>
    <id>http://zhangmhao.github.io/2015/01/26/node-webkit开发过程总结/</id>
    <published>2015-01-25T16:00:00.000Z</published>
    <updated>2015-09-22T14:18:33.000Z</updated>
    <content type="html"><![CDATA[<p>因为最近在个人项目<a href="https://github.com/zhangmhao/Life-Time-Tracker" target="_blank" rel="external">life-time-tracker</a>中用node-webkit + react来开发桌面程序，中间遇到了一些问题，这里记下来，没什么技术含量；有缘人如果看到的话，这里不适合入门，只言片语的描述一些我遇到的问题而已，文档请移步查看<a href="https://github.com/nwjs/nw.js/wiki" target="_blank" rel="external">wiki</a></p>
<h3 id="为什么要用node-webkit来做开发">为什么要用node-webkit来做开发</h3><p><strong> 简单就是：用我熟悉和喜爱的技术来快速迭代开发</strong></p>
<ol>
<li>用html+js+css来开发UI界面非常快速，可以利用已有的前端工具或框架，如jquery,react,angular,bootstap等来快速开发用户界面。<br>oxs下的32/64系统，可能不同系统有些功能会有区别</li>
<li>可以直接调用Node模块，这个是我最喜欢的一个特性,可以尽情发挥想象力，不再受限于浏览器。<code>node-webkit = node + webkit</code></li>
<li>跨平台，一份代码，进过打包之后可以运行于window,linux,mac</li>
</ol>
<h3 id="node-webkit_和_React">node-webkit 和 React</h3><p>选择React是因为个人喜欢React背后的一些理念（组件化,Data-flow），借机验证一下React开发较为复杂的界面上，会不会遇到一些问题。</p>
<p>不过使用React的话在调试上面会遇到一些问题，主要是新版node-webkit的问题，后面</p>
<h3 id="构建">构建</h3><p>使用gulp来进行构建，其中可以使用<a href="https://github.com/mllrsohn/node-webkit-builder" target="_blank" rel="external">node-webkit-builder</a>来进行node-webkit打包部署，非常方便。</p>
<h3 id="遇到的几个问题">遇到的几个问题</h3><h4 id="窗口关闭与退出">窗口关闭与退出</h4><p>点击关闭时，只是关闭窗口，后台继续运行</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gui.Window.get().on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//只隐藏窗口</span></span><br><span class="line">    <span class="keyword">this</span>.hide();</span><br><span class="line">    <span class="keyword">if</span> (event === <span class="string">'quit'</span>) &#123;</span><br><span class="line">        <span class="comment">//只有用户选择退出(如按下Ctrl-Q,或者点击退出菜单)才真正关闭程序</span></span><br><span class="line">        <span class="keyword">this</span>.close(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>点击dock(Mac上才有)之后打开程序</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> win = gui.Window.get();</span><br><span class="line">gui.App.on(<span class="string">'reopen'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    win.show();</span><br><span class="line">    win.focus();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="JS运行环境的问题">JS运行环境的问题</h4><p>在node_modules中要引用nw.gui模块，不能使用require，会提示找不到模块，正确的用法是使用window.require</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gui = <span class="built_in">window</span>.require(<span class="string">'nw.gui'</span>);</span><br></pre></td></tr></table></figure>
<p><strong> 问题资料：</strong></p>
<ul>
<li><a href="https://github.com/nwjs/nw.js/issues/128" target="_blank" rel="external">可以参考的issue</a></li>
<li><a href="https://github.com/nwjs/nw.js/wiki/Differences-of-JavaScript-contexts" target="_blank" rel="external">Differences-of-JavaScript-contexts</a></li>
</ul>
<h4 id="快捷键（站内与全局快捷键）">快捷键（站内与全局快捷键）</h4><p>全局快捷键，指的是离开程序界面，在操作系统上注册的快捷键。这个可以使用node-webkit提供的API</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shortcutDefinitions = [&#123;</span><br><span class="line">    key: <span class="string">"Ctrl+Shift+A"</span>,</span><br><span class="line">    active: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Global desktop keyboard shortcut: "</span> + <span class="keyword">this</span>.key + <span class="string">" active."</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    failed: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br><span class="line">shortcutDefinitions.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">definition</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Create a shortcut with |option|.</span></span><br><span class="line">    <span class="keyword">var</span> shortcut = <span class="keyword">new</span> gui.Shortcut(definition);</span><br><span class="line">    <span class="comment">// Register global desktop shortcut, which can work without focus.</span></span><br><span class="line">    gui.App.registerGlobalHotKey(shortcut);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>站内快捷键,这个可以使用DOM监听键盘输入，我在项目中采用的是 <a href="https://github.com/ccampbell/mousetrap" target="_blank" rel="external">mouseTrap</a>,非常简单，具体可以参考mouseTrap的文档。</p>
<h4 id="复制黏贴">复制黏贴</h4><p>要开启复制黏贴的快捷键功能，需要使用node-webkit提供的接口<code>createMacBuiltin</code>, 如果采用自定义的菜单，是无法启用复制黏贴的功能的;</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gui = <span class="built_in">require</span>(<span class="string">'nw.gui'</span>);</span><br><span class="line"><span class="keyword">var</span> mb = <span class="keyword">new</span> gui.Menu(&#123;type:<span class="string">"menubar"</span>&#125;);</span><br><span class="line">mb.createMacBuiltin(<span class="string">"your-app-name"</span>);</span><br><span class="line">gui.Window.get().menu = mb;</span><br></pre></td></tr></table></figure>
<h4 id="打开外部程序或链接">打开外部程序或链接</h4><p>在node-webkit中，不能直接使用<code>window.open()</code>来打开外部链接，因为会直接使用node-webkit来打开这个链接，正确的用法是调用<code>gui.Shell</code>, 更多参考<a href="https://github.com/nwjs/nw.js/wiki/Shell" target="_blank" rel="external">gui.Shell</a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Load native UI library.</span></span><br><span class="line"><span class="keyword">var</span> gui = <span class="built_in">require</span>(<span class="string">'nw.gui'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open URL with default browser.</span></span><br><span class="line">gui.Shell.openExternal(<span class="string">'https://github.com/rogerwang/node-webkit'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open a text file with default text editor.</span></span><br><span class="line">gui.Shell.openItem(<span class="string">'test.txt'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open a file in file explorer.</span></span><br><span class="line">gui.Shell.showItemInFolder(<span class="string">'test.txt'</span>);</span><br></pre></td></tr></table></figure>
<h4 id="Node-webkit的阻塞问题">Node-webkit的阻塞问题</h4><p>在开发的过程中遇到了一个问题，每当我进行数据库查询的时候，UI的渲染会被阻塞，造成页面的卡顿现象，很自然的想法就是通过child_process来进行优化, 但是由于node-webkit在child_process上有一些问题，使用起来遇到许多奇奇怪怪的问题，至今我也没有定位到原因，所以就放弃了child_process的解决方案，寻找其他方法。</p>
<p>接着想到通过开启一个新的窗口来运行，避免和原来的主窗口处于同一个render process, 但是事实证明我太天真了，结果还是一样的，因为通过<code>gui.Window.open()</code>打开的新窗口，其实与父窗口是处于同一个render process，UI阻塞的问题依旧存在。</p>
<p>后面通过查找wiki，找到了 <code>new-instance</code> 配置项，最后解决了问题，通过打开一个 <code>new-instance</code>的隐藏window来运行服务端，避免与主窗口处于同一个render process</p>
<p><a href="https://github.com/nwjs/nw.js/wiki/Window#openurl-options" target="_blank" rel="external">官方wiki的介绍</a></p>
<blockquote>
<p>Since v0.4.0, a boolean field new-instance can be used to start a new Node instance (webkit process).</p>
</blockquote>
<p>我的实现代码:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">var</span> serverWin</span> = gui.Window.<span class="keyword">open</span>('./server.html', &#123;</span><br><span class="line">    <span class="string">"new-instance"</span>: <span class="literal">true</span>,</span><br><span class="line">    show: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>解决到这里，服务器的计算密集型任务已经不会阻塞UI的渲染了，但是，还有一个问题，窗口之间的通讯问题，比如说，主窗口想要在服务器启动之后进入主界面。同样查找了官方wiki之后找到了<a href="https://github.com/nwjs/nw.js/wiki/Node-main" target="_blank" rel="external">node-main的文档</a>，想要通过这个共享的全局空间来实现窗口之间的通讯问题；但是，再一次证明我太天真了，按照文档中的方法还是无法解决通讯问题。既然原生的支持不好，那就想其他方式，方法有很多，通过文件，数据库，服务器等来进行中转了，也可以使用一些已有模块来实现；</p>
<p>更多资料参考<a href="https://github.com/nwjs/nw.js/wiki" target="_blank" rel="external">node-webkit wiki</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>因为最近在个人项目<a href="https://github.com/zhangmhao/Life-Time-Tracker" target="_blank" rel="external">life-time-tracker</a>中用node-webkit + rea]]>
    </summary>
    
      <category term="node" scheme="http://zhangmhao.github.io/tags/node/"/>
    
      <category term="nwjs" scheme="http://zhangmhao.github.io/tags/nwjs/"/>
    
      <category term="前端开发" scheme="http://zhangmhao.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="总结" scheme="http://zhangmhao.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何编程Idea-Machine]]></title>
    <link href="http://zhangmhao.github.io/2015/01/07/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BAIdea-Machine/"/>
    <id>http://zhangmhao.github.io/2015/01/07/如何成为Idea-Machine/</id>
    <published>2015-01-06T16:00:00.000Z</published>
    <updated>2015-09-22T14:19:01.000Z</updated>
    <content type="html"><![CDATA[<p>$$H(X) = \sum_{i=1}^n {p(x_i)\,I(x<em>i)} = -\sum</em>{i=1}^n {p(x_i) \log_b p(x_i)}$$</p>
<p>If you are anxious all day instead of grateful (the spiritual side of the practice) then you can’t be creative.Worry never solves the future and always takes away energy from the present.</p>
<blockquote>
<p>If a chair has four legs then it’s sturdy. If you remove one leg, then you can still sit in it but it will fall over at the slightest wind. And we all have the winds of change blowing in our lives.<br>If you remove two of the legs then you will fall over. And if you try to sit in a one-legged chair then you probably need serious help in general.</p>
</blockquote>
<p>对这一句话不是很理解，但是我觉得有意思，先写下来</p>
<blockquote>
<p>Ideas, art, business, life is all about connecting the dots of one area of your life with the dots in other areas of your life.</p>
</blockquote>
<p>另一句有启发的话</p>
<blockquote>
<p>Ideas are about giving. And the more you give to the world, the more value you get back.</p>
</blockquote>
<p>启发</p>
<blockquote>
<p>The fastest way to generate themes and ideas is to take two different areas and combine them.</p>
</blockquote>
<p>最小可行的步骤</p>
<blockquote>
<p>Always start with easy execution steps. MVEs. Minimum viable execution steps.</p>
</blockquote>
<p>Solid foundation</p>
<blockquote>
<p>The foundation gets strong when you focus on all areas of the daily practice. Physical health, emotional health (be around people you love), and spiritual health.Anger, envy, self-pity, regret, anxiety are all fires that burn the foundation. Gratitude and surrender washes away those fires.</p>
<p>make a list of the 10 ways you waste time every day.</p>
</blockquote>
<h3 id="What’s_going_to_happen_if_you_do_this_for_six_months?">What’s going to happen if you do this for six months?</h3><p>You’re going to be a mutant superhero.</p>
<p>You’re going to have fun creative ideas for every situation. You’re going to be able to see which ideas set your brain on nuclear.</p>
<p>You’re going to meet the right people who can help you execute on ideas. You’re going to turn into a fountain of giving.</p>
<p>You’re going to be the sort of person that understands that less effort leads to greater accomplishments.</p>
<p>You’re going to be immortal because you will begin to lead a life that is worth remembering forever.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>$$H(X) = \sum_{i=1}^n {p(x_i)\,I(x<em>i)} = -\sum</em>{i=1}^n {p(x_i) \log_b p(x_i)}$$</p>
<p>If you are anxious all day instead of grate]]>
    </summary>
    
      <category term="生活优化" scheme="http://zhangmhao.github.io/tags/%E7%94%9F%E6%B4%BB%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[所谓的自我效能(self-efficacy)是什么？]]></title>
    <link href="http://zhangmhao.github.io/2014/12/02/self-efficacy/"/>
    <id>http://zhangmhao.github.io/2014/12/02/self-efficacy/</id>
    <published>2014-12-01T16:00:00.000Z</published>
    <updated>2015-09-22T14:02:10.000Z</updated>
    <content type="html"><![CDATA[<h3 id="self-efficacy">self-efficacy</h3><p>Psychologist Albert Bandura has defined self-efficacy as one’s belief in one’s ability to succeed in specific situations. </p>
<p>According to Bandura’s theory, people with high self-efficacy—that is, those who believe they can perform well—are more likely to view difficult tasks as something to be mastered rather than something to be avoided.</p>
<h3 id="自我效能对思考模式的影响：">自我效能对思考模式的影响：</h3><ul>
<li><p>Self-efficacy has several effects on thought patterns and responses:<br>Low self-efficacy can lead people to believe tasks to be harder than they actually are. This often results in poor task planning, as well as increased stress.</p>
</li>
<li><p>People with high self-efficacy tend to take a wider view of a task in order to determine the best plan.</p>
</li>
<li>Obstacles often stimulate people with high self-efficacy to greater efforts, where someone with low self-efficacy will tend toward discouragement and giving up.</li>
</ul>
<h3 id="影响自我效能的因素(Factors_affecting_self-efficacy)">影响自我效能的因素(Factors affecting self-efficacy)</h3><p>Bandura identifies four factors affecting self-efficacy.</p>
<ul>
<li><strong>Experience</strong>  Success raises self-efficacy, while failure lowers it.</li>
<li><strong>Modeling</strong> 榜样，如果和我相似的人能够做到，我也能够做到</li>
<li><strong> Social Persuasion</strong> 别人的评价，好的评价和坏的评价对自我效能的影响</li>
<li><strong>Physiological Factors</strong> 对生理反应的解读，高自我效能的人将自己在压力情况下的生理反应理解为人之常情，而低自我效能的人，则认为这是能力低下的表现，又继续降低了自我效能。</li>
</ul>
<h3 id="一些区别">一些区别</h3><h4 id="Self-efficacy_versus_efficacy">Self-efficacy versus efficacy</h4><p>Unlike efficacy, which is the power to produce an effect—in essence, competence—the term self-efficacy is used, by convention, to refer to the belief (accurate or not) that one has the power to produce that effect by completing a given task or activity related to that competency. Self-efficacy is the belief in one’s efficacy</p>
<h2 id="参考">参考</h2><ol>
<li><a href="http://en.wikipedia.org/wiki/Self-efficacy" target="_blank" rel="external">http://en.wikipedia.org/wiki/Self-efficacy</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="self-efficacy">self-efficacy</h3><p>Psychologist Albert Bandura has defined self-efficacy as one’s belief in one’s ability to succee]]>
    </summary>
    
      <category term="心理学" scheme="http://zhangmhao.github.io/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Node错误处理]]></title>
    <link href="http://zhangmhao.github.io/2014/10/24/Node%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>http://zhangmhao.github.io/2014/10/24/Node错误处理/</id>
    <published>2014-10-23T16:00:00.000Z</published>
    <updated>2015-09-22T14:01:05.000Z</updated>
    <content type="html"><![CDATA[<p>最近在写一个个人项目，错误处理的代码写的比较混乱，读到一个博客的文章，按照这个方法进行处理，错误处理代码不至于乱成一窝粥。记录些阅读笔记:</p>
<h3 id="Operational_errors_vs-_programmer_errors">Operational errors vs. programmer errors</h3><blockquote>
<p>Learn to distinguish between operational errors, which are anticipatable, unavoidable errors, even in correct programs (e.g., failing to connect to a server), and programmer errors, which are bugs in the program.Operational errors can and should be handled. Programmer errors cannot be handled or reliably recovered from (nor should they be), and attempting to do so makes them harder to debug.</p>
</blockquote>
<h4 id="Operational_errors">Operational errors</h4><p>Operational errors represent run-time problems experienced by correctly-written programs. These are not bugs in the program. </p>
<p>Examples:</p>
<ul>
<li>failed to connect to server</li>
<li>failed to resolve hostname</li>
<li>invalid user input</li>
<li>request timeout</li>
<li>server returned a 500 response</li>
<li>socket hang-up</li>
<li>system is out of memory</li>
</ul>
<h4 id="Programmer_errors">Programmer errors</h4><p>Programmer errors are bugs in the program. These are things that can always be avoided by changing the code</p>
<p>Example:</p>
<ul>
<li>调用函数过程传递错误的参数</li>
<li>tried to read property of “undefined”</li>
<li>called an asynchronous function without a callback</li>
</ul>
<h4 id="Handling_operational_errors">Handling operational errors</h4><blockquote>
<p>Nor can you centralize all error handling in one part of the program, the same way you can’t centralize “performance” in one part of the program. </p>
</blockquote>
<ul>
<li><strong>Deal with the failure directly</strong> 例如<code>文件不存在</code>就创建该文件，<code>访问失败</code>则重试</li>
<li><strong>Propagate the failure to your client</strong>. If you don’t know how to deal with the error, the simplest thing to do is to abort whatever operation you’re trying to do, clean up whatever you’ve started, and deliver an error back to your client.</li>
<li><strong>Retry the operation</strong> If you’re several layers deep in the stack (e.g., you’re being called by a client, which was called by another client, which is being driven by a human), it’s usually better to fail fast and let the end client deal with retries. If every layer of the stack thinks it needs to retry on errors, the user can end up waiting much longer than they should because because each layer didn’t realize that the underlying layer was also retrying.</li>
<li><strong>Log the error</strong> — and do nothing else</li>
</ul>
<p>##参考</p>
<ol>
<li><a href="https://www.joyent.com/developers/node/design/errors" target="_blank" rel="external">https://www.joyent.com/developers/node/design/errors</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在写一个个人项目，错误处理的代码写的比较混乱，读到一个博客的文章，按照这个方法进行处理，错误处理代码不至于乱成一窝粥。记录些阅读笔记:</p>
<h3 id="Operational_errors_vs-_programmer_errors">Operational e]]>
    </summary>
    
      <category term="Nodejs" scheme="http://zhangmhao.github.io/categories/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[RESTful学习笔记]]></title>
    <link href="http://zhangmhao.github.io/2014/09/12/Restful-API/"/>
    <id>http://zhangmhao.github.io/2014/09/12/Restful-API/</id>
    <published>2014-09-11T16:00:00.000Z</published>
    <updated>2015-09-22T14:00:35.000Z</updated>
    <content type="html"><![CDATA[<h3 id="什么是RESTful架构：">什么是RESTful架构：</h3><p>Fielding将他对互联网软件的架构原则，定名为REST，即Representational State Transfer的缩写。我对这个词组的翻译是”表现层状态转化”。要理解RESTful架构，最好的方法就是去理解Representational State Transfer这个词组到底是什么意思，它的每一个词代表了什么涵义。</p>
<h4 id="资源（Resources）">资源（Resources）</h4><p>网络上的一个实体，它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI。</p>
<h4 id="表现层（Representation）">表现层（Representation）</h4><p>我们把”资源”具体呈现出来的形式，叫做它的”表现层”（Representation）。”资源”是一种信息实体，它可以有多种外在表现形式。比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现。URI只代表资源的实体，不代表它的形式。严格地说，有些网址最后的”.html”后缀名是不必要的，因为这个后缀名表示格式，属于”表现层”范畴，而URI应该只代表”资源”的位置。它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对”表现层”的描述。</p>
<h4 id="状态转化（State_Transfer）">状态转化（State Transfer）</h4><p>客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。 </p>
<p>这里引用阮一峰的总结：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 每一个URI代表一种资源；</span><br><span class="line"><span class="number">2.</span> 客户端和服务器之间，传递这种资源的某种表现层；</span><br><span class="line"><span class="number">3.</span> 客户端通过四个HTTP动词，对服务器端资源进行操作，实现<span class="string">"表现层状态转化"</span></span><br></pre></td></tr></table></figure>
<h3 id="实例">实例</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /zoos：列出所有动物园</span><br><span class="line">POST /zoos：新建一个动物园</span><br><span class="line">GET <span class="regexp">/zoos/</span>ID：获取某个指定动物园的信息</span><br><span class="line">PUT <span class="regexp">/zoos/</span>ID：更新某个指定动物园的信息（提供该动物园的全部信息）</span><br><span class="line">PATCH <span class="regexp">/zoos/</span>ID：更新某个指定动物园的信息（提供该动物园的部分信息）</span><br><span class="line">DELETE <span class="regexp">/zoos/</span>ID：删除某个动物园</span><br><span class="line">GET <span class="regexp">/zoos/</span>ID/animals：列出某个指定动物园的所有动物</span><br><span class="line">DELETE <span class="regexp">/zoos/</span>ID<span class="regexp">/animals/</span>ID：删除某个指定动物园的指定动物</span><br></pre></td></tr></table></figure>
<h3 id="RESTful架构有一些典型的设计误区">RESTful架构有一些典型的设计误区</h3><p>最常见的一种设计错误，就是URI包含动词。因为”资源”表示一种实体，所以应该是名词，URI不应该有动词，动词应该放在HTTP协议中。<br>另一个设计误区，就是在URI中加入版本号：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　<span class="symbol">http:</span>/<span class="regexp">/www.example.com/app</span><span class="regexp">/1.0/foo</span></span><br><span class="line">　<span class="symbol">http:</span>/<span class="regexp">/www.example.com/app</span><span class="regexp">/1.1/foo</span></span><br><span class="line">　<span class="symbol">http:</span>/<span class="regexp">/www.example.com/app</span><span class="regexp">/2.0/foo</span></span><br></pre></td></tr></table></figure>
<p>因为不同的版本，可以理解成同一种资源的不同表现形式，所以应该采用同一个URI。版本号可以在HTTP请求头信息的Accept字段中进行区分（参见Versioning REST Services）：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Accep<span class="variable">t:</span> vnd.example-<span class="keyword">com</span>.foo+json; <span class="keyword">version</span>=<span class="number">1.0</span></span><br><span class="line">Accep<span class="variable">t:</span> vnd.example-<span class="keyword">com</span>.foo+json; <span class="keyword">version</span>=<span class="number">1.1</span></span><br><span class="line">Accep<span class="variable">t:</span> vnd.example-<span class="keyword">com</span>.foo+json; <span class="keyword">version</span>=<span class="number">2.0</span></span><br></pre></td></tr></table></figure>
<h3 id="RESTful_API最好做到Hypermedia">RESTful API最好做到Hypermedia</h3><p>例子:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "<span class="attribute">link</span>": <span class="value">&#123;</span><br><span class="line">        "<span class="attribute">rel</span>":   <span class="value"><span class="string">"collection https://www.example.com/zoos"</span></span>,</span><br><span class="line">        "<span class="attribute">href</span>":  <span class="value"><span class="string">"https://api.example.com/zoos"</span></span>,</span><br><span class="line">        "<span class="attribute">title</span>": <span class="value"><span class="string">"List of zoos"</span></span>,</span><br><span class="line">        "<span class="attribute">type</span>":  <span class="value"><span class="string">"application/vnd.yourformat+json"</span></span><br><span class="line">    </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。</p>
<p>实际例子可以看<a href="https://api.github.com/" target="_blank" rel="external">Github API</a></p>
<h2 id="参考">参考</h2><ol>
<li><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2011/09/restful.html</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external">RESTful API 设计指南</a></li>
<li><a href="http://codeplanet.io/principles-good-restful-api-design/" target="_blank" rel="external">Principles of good RESTful API Design</a></li>
<li><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1" target="_blank" rel="external">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="什么是RESTful架构：">什么是RESTful架构：</h3><p>Fielding将他对互联网软件的架构原则，定名为REST，即Representational State Transfer的缩写。我对这个词组的翻译是”表现层状态转化”。要理解RESTful]]>
    </summary>
    
      <category term="restful" scheme="http://zhangmhao.github.io/tags/restful/"/>
    
      <category term="前端开发" scheme="http://zhangmhao.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[探索API管理的可行方案]]></title>
    <link href="http://zhangmhao.github.io/2014/07/12/%E6%8E%A2%E7%B4%A2%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86API/"/>
    <id>http://zhangmhao.github.io/2014/07/12/探索如何管理API/</id>
    <published>2014-07-11T16:00:00.000Z</published>
    <updated>2015-09-22T13:59:38.000Z</updated>
    <content type="html"><![CDATA[<h3 id="为什么要管理接口？">为什么要管理接口？</h3><p>开发过程中，前端和后端耦合的部分就在于接口的联调，如果没有一份详细并且清晰准确的文档，沟通成本往往会大大的增加，再加上沟通流畅度的影响（开发人员不在同一个办公地点），还有，很重要的一点是：到要保证准确就必须保证文档和实际接口代码的同步，对于繁（懒）忙（惰）的程序员来讲，这个是无法100%保证的。而对于这一点，仅仅建立一份文档是远远不够的，因为这里涉及到人的因数，而人往往是系统当中最不靠谱的，稳定性最差的模块。如果你不想成为这种机械工作中的一个模块，就必须想出更好的办法来管理接口。</p>
<p>这里先总结一下，如果缺少有效的接口管理，会有以下坏处：</p>
<ul>
<li>沟通成本高</li>
<li>容易出错</li>
</ul>
<p>而以上两点导致一个终极的问题：<strong>生命的浪费</strong>，没有人愿意将时间花在无谓的事情之上。目前在接口管理上又那些痛点呢？</p>
<h3 id="痛点">痛点</h3><h4 id="1-_编写接口文档较为繁琐">1. 编写接口文档较为繁琐</h4><ul>
<li>文档格式不统一<br>各个团队没有一份统一的文档格式，不方便不同团队之间的合作和交流。</li>
<li>静态文本的编辑成本高<br>文本的格式化，代码的高亮等等</li>
</ul>
<h4 id="2-_维护文档更难">2. 维护文档更难</h4><p>维护文档的主要工作就是保持接口文档和代码的一致性，如果代码发生改变而文档没有更新，那么依旧是有一定的沟通成本。</p>
<h4 id="3-_接口文档的难以管理">3. 接口文档的难以管理</h4><p>有了文档之后，要查阅，要修改，要归类，要分版本。这些都是需要一个平台来进行支撑，而不仅仅是用一份静态文本就可以解决的</p>
<h4 id="4-_接口测试难">4. 接口测试难</h4><p>在平时的开发中，前端和后端定好了接口协议之后就并行进行开发，有的是前端自己模拟数据，有的是使用后端的模拟数据。等到后端接口开发完成之后，就将真实接口来替换模拟数据的接口。在这里有两种情形：</p>
<ol>
<li>使用后端提供的模拟数据，工作量在后端</li>
<li>前端自己模拟数据，工作量在前端，需要将访问接口切换为真实数据</li>
</ol>
<p>自己对情形1不熟悉，这里先谈情形2，后端接口完成之后，前端进行接口替换，验证方式类似冒烟测试，如果时间充裕，就会验证的仔细，时间不充裕，则有可能会忽略掉实际接口和接口文档中的部分细微差别。这里依靠人工的验证方式，不仅效率低下，而且容易出错。解决的办法就是提供接口的单元测试和回归测试。每一个接口的定义就是一个测试用例，接口完成之后可以借助单元测试正确高效的验证接口的正确性。而每一次对接口的修改，都可以进行回归测试，验证接口的修改是否会引起系统的错误。</p>
<h4 id="5-_对接口文档的重视度不足">5. 对接口文档的重视度不足</h4><p>我见过部分团队接口文档都给省了，直接口头交流。当然会沟通成本过高。但是问其为何不用接口文档，他们就是觉得写接口文档太麻烦了，维护也麻烦。也就是说，接口文档编写维护成本高，这已经是一个门槛了，再加上看不到接口文档带来的效益，所以他们宁愿采取低效的口头交流。<br>而有的团队还是会编写接口文档，但是随着项目的迭代，很多的接口文档都无法跟上代码的脚步。</p>
<p>好，现在针对这些痛点来进行平台的设计</p>
<ul>
<li>编写难</li>
<li>维护难</li>
<li>测试难</li>
</ul>
<h3 id="系统设计">系统设计</h3><h4 id="1-_接口管理">1. 接口管理</h4><h5 id="1-1_可视化编辑">1.1 可视化编辑</h5><p>降低编写成本，写接口就像写对象图。</p>
<p>一般接口文档是如何描述接口的呢？</p>
<p>非RestFul风格：</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">URL: /getTodoList</span><br><span class="line"><span class="function"><span class="keyword">method</span>:</span> GET</span><br><span class="line"><span class="keyword">desc</span>: 获取Todo列表，<span class="keyword">type</span>参数进行过滤，已有类型</span><br><span class="line">    已完成: done</span><br><span class="line">    已删除: delete</span><br><span class="line">    代办: todo</span><br><span class="line">如果不传表示不过滤</span><br><span class="line"><span class="keyword">params</span>:</span><br><span class="line">    <span class="keyword">type</span> <span class="comment">&#123;required&#125;</span><span class="comment">&#123;string&#125;</span> done/todo/delete</span><br><span class="line">example:</span><br><span class="line">    /getTodo?id=<span class="number">23</span>ef</span><br><span class="line"></span><br><span class="line">-----------------------------------------------</span><br><span class="line"></span><br><span class="line">URL: /getTodo</span><br><span class="line"><span class="function"><span class="keyword">method</span>:</span> GET</span><br><span class="line"><span class="keyword">desc</span>: 获取todo的详情</span><br><span class="line"><span class="keyword">params</span>:</span><br><span class="line">    id <span class="comment">&#123;required&#125;</span><span class="comment">&#123;string&#125;</span> Todo项目的ID</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">    /getTodo?id=<span class="number">23</span>ef</span><br><span class="line"></span><br><span class="line">-----------------------------------------------</span><br><span class="line"></span><br><span class="line">URL: /saveTodo</span><br><span class="line"><span class="function"><span class="keyword">method</span>:</span> POST</span><br><span class="line"><span class="keyword">desc</span>: 保存Todo</span><br><span class="line"><span class="keyword">params</span>:</span><br><span class="line">    id  <span class="comment">&#123;string&#125;</span><span class="comment">&#123;required&#125;</span> ID</span><br><span class="line">    title  <span class="comment">&#123;string&#125;</span><span class="comment">&#123;required&#125;</span> 标题</span><br><span class="line">    note <span class="comment">&#123;string&#125;</span> 备注</span><br><span class="line">    </span><br><span class="line">-----------------------------------------------</span><br><span class="line"></span><br><span class="line">URL: /createTodo</span><br><span class="line"><span class="function"><span class="keyword">method</span>:</span> POST</span><br><span class="line"><span class="keyword">desc</span>: 创建Todo</span><br><span class="line"><span class="keyword">params</span>:</span><br><span class="line">    title  <span class="comment">&#123;string&#125;</span><span class="comment">&#123;required&#125;</span> 标题</span><br><span class="line">    note <span class="comment">&#123;string&#125;</span> 备注</span><br></pre></td></tr></table></figure>
<p>上面这一份文档存在的问题</p>
<ul>
<li><p>可读性差<br>视觉上侧重点不突出，缺乏关注点，不够一目了然。如果要在视觉上进行处理，就必须要有文本格式化，这个如果人工进行维护，是比较麻烦的</p>
</li>
<li><p>可维护性差<br>如果要进行修改，对于新人则需要先学习文档的格式和各种标志位{required}{string}之类的，然后才能进行修改。有一定的学习曲线。</p>
</li>
<li><p>无法进行过滤，搜索<br>例如我仅仅想查看接口中的required变量，或者我要过滤出POST类型接口，我想根据接口名进行过滤</p>
</li>
</ul>
<p>而可视化编辑和更友好的管理界面(解决搜索过滤问题)就是要解决这种问题</p>
<h5 id="1-2_接口实现进度">1.2 接口实现进度</h5><p>可是查看接口实现进度</p>
<p>一旦接口可以访问，且数据正确，则表示该接口以完成。</p>
<h5 id="1-3_接口版本管理">1.3 接口版本管理</h5><p>每一次对接口的修改都可以有一个对应的版本号。接口使用方可以指定对应的版本访问不同版本的数据，例如:</p>
<pre><code>`/<span class="number">1.1</span><span class="number">.0</span>/todo/<span class="number">23</span>ef`  返回<span class="number">1.1</span><span class="number">.0</span>版本的数据
`/<span class="number">1.2</span><span class="number">.0</span>/todo/<span class="number">23</span>ef`  返回<span class="number">1.2</span><span class="number">.0</span>版本的数据
</code></pre><h4 id="2-_Mock数据">2. Mock数据</h4><p>设计好接口之后，为了前后端可以并行开发，就需要先提供模拟数据。一般来讲，不是后端提供，就是前端自己模拟数据，无论使用哪一种方式，都得自己去造数据。这也是一个耗时的地方。那么，该如何改进呢？</p>
<p>一旦使用APIE系统添加完接口之后，就可以根据接口描述来自动造数据<br>例如一个todo系统的接口描述为</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">todo</span>: <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">desc</span>:<span class="value"> <span class="string">'todo项目'</span>,</span><br><span class="line">    apis: [&#123;</span><br><span class="line">        name: <span class="string">'todos'</span>,</span><br><span class="line">        desc: <span class="string">'获取todo列表'</span>,</span><br><span class="line">        uri: <span class="string">'todos'</span>,</span><br><span class="line">        method: <span class="string">'GET'</span>,</span><br><span class="line">        parameters: [],</span><br><span class="line">        model: &#123;</span><br><span class="line">            id: &#123;</span><br><span class="line">                type: <span class="string">'number'</span>,</span><br><span class="line">                desc: <span class="string">'id'</span>,</span><br><span class="line">                required: true</span><br><span class="line">            </span></span></span>&#125;</span><br><span class="line">            <span class="tag">title</span>: <span class="rules">&#123;</span><br><span class="line">                <span class="rule"><span class="attribute">type</span>:<span class="value"> <span class="string">'string'</span>,</span><br><span class="line">                desc: <span class="string">'标题'</span>,</span><br><span class="line">                required: true</span><br><span class="line">            </span></span></span>&#125;,</span><br><span class="line">            <span class="tag">note</span>: <span class="rules">&#123;</span><br><span class="line">                <span class="rule"><span class="attribute">type</span>:<span class="value"> <span class="string">'string'</span>,</span><br><span class="line">                desc: <span class="string">'备注'</span></span><br><span class="line">            </span></span></span>&#125;,</span><br><span class="line">            <span class="tag">done</span>: <span class="rules">&#123;</span><br><span class="line">                <span class="rule"><span class="attribute">type</span>:<span class="value"> <span class="string">'boolean'</span>,</span><br><span class="line">                desc: <span class="string">'已完成'</span>,</span><br><span class="line">                default: false</span><br><span class="line">            </span></span></span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以自动造数据, 接口<code>/todos</code>返回:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">success</span>:<span class="value"> true,</span><br><span class="line">    data: [&#123;</span><br><span class="line">        id: <span class="string">'23ef'</span>,</span><br><span class="line">        title: <span class="string">'this is a title 1'</span>,</span><br><span class="line">        note: <span class="string">'this is a note 1'</span>,</span><br><span class="line">        done: false</span><br><span class="line">    </span></span></span>&#125;, <span class="rules">&#123;</span><br><span class="line">        <span class="rule"><span class="attribute">id</span>:<span class="value"> <span class="string">'23f0'</span>,</span><br><span class="line">        title: <span class="string">'this is a title 2'</span>,</span><br><span class="line">        note: <span class="string">''</span>,</span><br><span class="line">        done: true</span><br><span class="line">    </span></span></span>&#125;, ...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接口<code>/todos/23ef</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">success</span>:<span class="value"> true,</span><br><span class="line">    data data: [&#123;</span><br><span class="line">        id: <span class="string">'23ef'</span>,</span><br><span class="line">        title: <span class="string">'this is a title 1'</span>,</span><br><span class="line">        note: <span class="string">'this is a note 1'</span>,</span><br><span class="line">        done: false</span><br><span class="line">    </span></span></span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意到，上面的数据是一种不包含业务细节的数据模拟<code>this is a title 1</code>之类的数据不够真实。那么该如何让系统更加真实呢？前期暂时没有一个太好的规划，目前的想法是通过用户自己录入数据，或者系统自身先<strong>预置一部分数据</strong>。例如email,address,url之类是可以模拟出来的。业务方面也可以<strong>通过学习用户自定义的数据</strong>来增加系统的经验，例如如果有系统定义了浏览器平台，且添加了一些自定义模拟数据。则将这些模拟数据添加到模拟数据的数据库中。</p>
<h4 id="3-_接口测试">3. 接口测试</h4><h5 id="3-1_单元测试">3.1 单元测试</h5><h5 id="3-2_回归测试">3.2 回归测试</h5><h4 id="4-_网络环境的模拟">4. 网络环境的模拟</h4><h5 id="4-1_常用环境(2G,3G,wifi,4G)">4.1 常用环境(2G,3G,wifi,4G)</h5><p>通过收集运行商网速数据来进行模拟<br>返回数据的时间:</p>
<p>$$ rtt = \dfrac{dataSize}{speed} $$</p>
<p>rtt: roadtrip time</p>
<h5 id="4-2_自定义网速">4.2 自定义网速</h5><p>不同时间段可以有不同的速度</p>
<hr>
<h3 id="代码的双向同步">代码的双向同步</h3><p>来模拟一下这一个过程：</p>
<p>现在平台上进行编辑,</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Message [messages/&#123;id&#125;]</span></span><br><span class="line">This resource represents one particular message identified by its <span class="keyword">*</span>id<span class="keyword">*</span>.</span><br><span class="line"><span class="comment">## Retrieve Message [GET]</span></span><br><span class="line">Retrieve a message by its <span class="keyword">*</span>id<span class="keyword">*</span>.</span><br><span class="line"></span><br><span class="line">+ Response 200 (text/plain)</span><br><span class="line"></span><br><span class="line">        Hello World!</span><br><span class="line"></span><br><span class="line"><span class="comment">## Delete Message [DELETE]</span></span><br><span class="line">Delete a message. <span class="keyword">*</span><span class="keyword">*</span>Warning:<span class="keyword">*</span><span class="keyword">*</span> This action <span class="keyword">*</span><span class="keyword">*</span>permanently<span class="keyword">*</span><span class="keyword">*</span> removes the message from the database.</span><br><span class="line"></span><br><span class="line">+ Response 204</span><br></pre></td></tr></table></figure>
<p>上面定义了api如 <code>messages/1</code> 接口</p>
<p>代码中只要添加对应的标识符</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@apie</span> [messages/&#123;id&#125; GET]</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMessage</span><span class="params">(id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后如果有代码库权限，则平台可以进行代码分析。找出文档和代码的差异，进而进行同步，如果文档发生改变，而代码没有发生改变，则平台进行提醒，用户自行修改，如果代码发生改变，而文档没有变，则进行提示，代码发生改变，是否进行代码同步。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="为什么要管理接口？">为什么要管理接口？</h3><p>开发过程中，前端和后端耦合的部分就在于接口的联调，如果没有一份详细并且清晰准确的文档，沟通成本往往会大大的增加，再加上沟通流畅度的影响（开发人员不在同一个办公地点），还有，很重要的一点是：到要保证准确就必须保]]>
    </summary>
    
      <category term="设计文档" scheme="http://zhangmhao.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/"/>
    
      <category term="开发" scheme="http://zhangmhao.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[代码整洁之道(读书笔记)]]></title>
    <link href="http://zhangmhao.github.io/2014/06/26/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93(%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0)/"/>
    <id>http://zhangmhao.github.io/2014/06/26/代码整洁之道(读书笔记)/</id>
    <published>2014-06-25T16:00:00.000Z</published>
    <updated>2015-09-22T13:58:16.000Z</updated>
    <content type="html"><![CDATA[<h2 id="1-_整洁代码">1. 整洁代码</h2><h4 id="什么样的代码算是整洁？">什么样的代码算是整洁？</h4><ul>
<li>只做好一件事情</li>
<li>没有重复代码</li>
<li>代码逻辑直接了当，只包含必须的代码</li>
<li>尽可能少的依赖关系，便于维护</li>
<li>明确的定义，提供清晰的尽可能少的API</li>
<li>小块的代码块</li>
<li>好的表达力（体现在变量名，方法和类的抽象等）</li>
<li>完善错误处理代码（容易被忽略的细节）</li>
<li>一致性（架构设计，变量名，编码规范等）</li>
</ul>
<blockquote>
<p>让营地比你来的时候更加干净</p>
</blockquote>
<p>这一条童子军军规，恰如其分的表达了我的愿望，让项目的代码质量随之时间的推移变得越来越好</p>
<h2 id="2-_有意义的命名">2. 有意义的命名</h2><h4 id="避免误导">避免误导</h4><p>例如: 不要用accountList来指定一组账号，除非它真的是List类型，可以使用accounts或者accountGroup</p>
<h4 id="有意义的区分">有意义的区分</h4><p>例如: </p>
<ol>
<li>使用Product ProductInfo ProductData来表示3个不同类的话是很难区分的，因为Info和Data意义上并没有太大的区别，容易混淆，类似的还有moneyCount和money</li>
<li>nameString真的比name更加清晰吗？</li>
</ol>
<ul>
<li>类名和对象应该是名词，或者名词短语，不应该是动词</li>
<li>方法名应该是动词，或者动词短语</li>
</ul>
<h2 id="3-_函数">3. 函数</h2><ul>
<li>短小</li>
<li>只做一件事（函数中的代码处于同一个抽象层级）</li>
<li>无副作用 只做一件事可以保证无副作用，但是一个无副作用的函数不一定就只做一件事。所以这里不能将无副作用看成是上一点“只做一件事”的结果。副作用：时序性的耦合，顺序依赖。</li>
<li>给函数起一个好名字（包括一致的命名方式）<ul>
<li>动词+关键字（名词）<code>writeFile</code>要优于模糊不清的<code>write</code></li>
</ul>
</li>
<li><p>尽可能少的函数参数（当然,0个是最优的）</p>
<ul>
<li>合理的二元函数 例如笛卡尔点 new Point(10, 10) 这个是自然的秩序，二元是必然的</li>
<li><p>参数较多，就该考虑是否需要抽象为对象 <figure class="highlight"><figcaption><span>x, double y, double radius)``` 可以改写为 ```drawCircle(Point p, double radius)```.将多元函数成功降元。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- &#26631;&#24535;&#21442;&#25968;</span><br></pre></td></tr></table></figure></p>
<p>render(boolean isMobile);</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以改写为两个函数:</span><br></pre></td></tr></table></figure>
<p>renderForMobile()  和 renderForPC()<br>``` </p>
</li>
</ul>
</li>
<li>输出参出  <code>appendFooter</code> 在不查看函数声明的时候, 直觉的会把参数当做输入参数，也就是<code>appendFooter(footer)</code> 但是如果函数声明为<code>void appendFooter(StringBuffer report)</code>,就会恍然大悟了原来是输出参数。优化的方法，可以改写为： <code>report.appendFooter(footer)</code> </li>
<li>错误处理<ul>
<li>抽离try/catch代码块</li>
<li>使用异常的优势<ul>
<li>将异常处理代码从主路径中分离出来(P42-3.9)</li>
</ul>
</li>
</ul>
</li>
<li>Don’t Repeat Yourself (DRY)</li>
</ul>
<blockquote>
<p>语言是程序员设计用来描述系统的。函数是语言的动词，类是语言的名词。大师级程序员把系统当做故事来讲，而不是当做程序来写。他们使用编程语言提供的工具来搭建一种更为丰富，更有表达力的语言，用来讲那个故事。<br>使用清晰精确的语言来讲述一个故事。</p>
</blockquote>
<h2 id="4-_注释">4. 注释</h2><h4 id="注释是一种失败">注释是一种失败</h4><p>无法用代码语言清晰直接表达自己的思路，而需要简洁用其他语言来表达自己的意图。这个时候最好考虑一下是否先改造代码，而不是添加注释。</p>
<h4 id="注释会撒谎">注释会撒谎</h4><p>程序员很难坚持维护注释，导致注释和代码随之时间的推移会慢慢脱节，所以尽可能用代码语言来解释，因为代码是唯一正确的信息源。</p>
<h4 id="值得写的注释">值得写的注释</h4><ul>
<li>法律信息</li>
<li>对意图的解释</li>
<li>警示</li>
<li>TODO</li>
<li>Public API DOC（私有函数是否需要API文档值得商榷）</li>
</ul>
<h4 id="应该删除的注释">应该删除的注释</h4><p>要写就必须写好注释，不要喃喃自语的废话</p>
<ul>
<li>多余的注释</li>
<li>被注释掉的无用代码（这也属于注释的一部分）</li>
</ul>
<h4 id="需要改进的注释">需要改进的注释</h4><ul>
<li>解释的不够详细</li>
<li>可以用代码语言便可解释清楚的注释就不要用注释</li>
</ul>
<h2 id="5-_单元测试">5. 单元测试</h2><p>测试代码和生产代码一样重要，测试代码的可读性甚至要跟强。不好的测试相当于没有测试，因为迟早会因为难以维护而起不到单元测试的作用。</p>
<h4 id="单元测试的编写步骤">单元测试的编写步骤</h4><ol>
<li><strong>Build</strong> 构造测试数据</li>
<li><strong>Operate</strong> 操作测试数据</li>
<li><strong>Check</strong> 检查测试数据</li>
</ol>
<h2 id="6-_对象和数据结构">6. 对象和数据结构</h2><p>隐藏实现并非只是在变量之间放上一个函数层那么简单，隐藏实现关乎抽象。下意识的使用Getter和Setter将变量推向外部（public）,这样的行为是不可取的。每一个公有接口都应该是深思熟虑过的，一遍用户无需了解数据的实现细节就能够操作数据的本体<br>而且简单的使用Getter和Setter是违反The Law of Demeter. </p>
<h2 id="7-_类">7. 类</h2><h4 id="类应该短小">类应该短小</h4><p>可以用代码行数(LOC)来衡量函数的大小，用什么来衡量一个类的大小呢？ <strong>权责！</strong></p>
<ul>
<li><strong>单一权责</strong></li>
<li><p><strong>内聚</strong></p>
<p>  将类中的大函数分割成几个小函数，但是这样子，小函数之间就会通过函数参数进行通信，而将函数参数上升为类的属性变量，就不需要传参数了，但是这样子也意味着类丧失了内聚性，因为出现了越来越多避免传参数而出现的类变量。为了提高这些类的内聚，就会拆分这些类。所以将大函数拆解为小函数，往往也是将类拆分为多个小类的契机。</p>
</li>
<li>类的方法应该细粒度（甚至是原子操作）</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1-_整洁代码">1. 整洁代码</h2><h4 id="什么样的代码算是整洁？">什么样的代码算是整洁？</h4><ul>
<li>只做好一件事情</li>
<li>没有重复代码</li>
<li>代码逻辑直接了当，只包含必须的代码</li>
<li>尽可能少的]]>
    </summary>
    
      <category term="读书笔记" scheme="http://zhangmhao.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[暗时间 (读书笔记)]]></title>
    <link href="http://zhangmhao.github.io/2014/06/17/%E6%9A%97%E6%97%B6%E9%97%B4(%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0)/"/>
    <id>http://zhangmhao.github.io/2014/06/17/暗时间(读书笔记)/</id>
    <published>2014-06-16T16:00:00.000Z</published>
    <updated>2015-09-22T13:57:36.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>多思考的人心理年龄较大</p>
</blockquote>
<p><strong>思维时间</strong>：推理的过程，或称之为暗时间，吃饭，上厕所，买菜，逛街，都可以变成暗时间</p>
<p><code>投入时间= 时间 * 效率</code></p>
<p>迅速进入状态，并保持状态（思维体力），抗干扰</p>
<h3 id="如何有效的记忆">如何有效的记忆</h3><p>知识表面的细节会迷惑我们的记忆，阻碍我们对知识的运用。意味着我们从既有经验总结知识的时候，应利用适当的抽象来得出适用范围更广的知识，也意味着遇到新问题的时候应该抽象出问题的本质，去除不相干的因素，避免干扰从而有效提取之前抽象出来的知识。</p>
<ul>
<li>定期回顾旧知识</li>
<li>创造回忆的机会<ul>
<li>经常讲给别人听，或者讨论</li>
<li>整理笔记</li>
<li>写书 关联知识，进行知识系统化 </li>
<li>进行知识的实践（虚拟实践和真实实践）</li>
<li>抽象和推广(泛化，推理)</li>
<li>联系自身经历</li>
</ul>
</li>
</ul>
<blockquote>
<p>如果你想真正得到一些知识，最好过滤一下你的信息，否则你只是在别人的知识中得意着</p>
</blockquote>
<h3 id="好的学习习惯">好的学习习惯</h3><h4 id="重视提前积累">重视提前积累</h4><p>设想若干年会做那些事情，需要那些技能和基础，现在就开始准备。提前一年想到，就多了一年的准备时间。每天投入30min，1年之后也会有一定的作用</p>
<h4 id="不忘抬头看路">不忘抬头看路</h4><p>时间有限，要判断一个东西导致值不值得学习。</p>
<h4 id="对新知识的总结">对新知识的总结</h4><h4 id="指定阅读计划">指定阅读计划</h4><h4 id="积累对问题的疑惑">积累对问题的疑惑</h4><p>对一个问题的疑问越多，思考的就越多，一般都会讲带着疑问去看书也是同理</p>
<h4 id="有选择的阅读">有选择的阅读</h4><p>选择好的资料来阅读。而且信息密度低（废话多）的书就可以快速阅读，信息密度高的书需要花多时间阅读<br>阅读的时候这样去切分内容：问题是什么？方案是什么？例子是什么？</p>
<h4 id="利用时间碎片">利用时间碎片</h4><h4 id="看不懂知识的原因">看不懂知识的原因</h4><ol>
<li>看的不够深入</li>
<li>作者讲的不够清晰</li>
<li>涉及到不懂的概念太多</li>
</ol>
<h4 id="对本质知识和非本质知识区分对待">对本质知识和非本质知识区分对待</h4><p>本质知识深入学习（本质知识需要较长时间掌握，如数学，物理，计算机原理等），非本质的用到的读读用户手册就够了</p>
<blockquote>
<p>All Life is Problem-Solving</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>多思考的人心理年龄较大</p>
</blockquote>
<p><strong>思维时间</strong>：推理的过程，或称之为暗时间，吃饭，上厕所，买菜，逛街，都可以变成暗时间</p>
<p><code>投入时间= 时间 * 效率</code>]]>
    </summary>
    
      <category term="时间管理" scheme="http://zhangmhao.github.io/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
    
      <category term="读书笔记" scheme="http://zhangmhao.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计中的设计(读书笔记)]]></title>
    <link href="http://zhangmhao.github.io/2014/06/08/%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1(%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0)/"/>
    <id>http://zhangmhao.github.io/2014/06/08/设计中的设计(读书笔记)/</id>
    <published>2014-06-07T16:00:00.000Z</published>
    <updated>2015-09-22T13:57:02.000Z</updated>
    <content type="html"><![CDATA[<h2 id="设计到底是什么？">设计到底是什么？</h2><h4 id="设计源于生活，应用于生活">设计源于生活，应用于生活</h4><p>机械化生产速度惊人，粗糙的产品大量出现，，那些热爱生活的人们对旧日审美的流逝倍感痛心。机械对传统美感的践踏，是人们不能忍受的。<strong>人们的审美意识对工业机制产生的反弹，现代设计的概念由此诞生</strong>。</p>
<h4 id="设计的整合：包豪斯设计运动">设计的整合：包豪斯设计运动</h4><p>经济发展水平导致了生活意识的成熟，开始对设计的关注</p>
<p>美国的经济给与其设计的思想，将设计当做一种经营资源来使用，利用消费者喜新厌旧的心里，通过外观的更新换代来促使消费动机的产生</p>
<p>第二次世界大战之后日本成为世界工厂（规格化，量化的产品），经济虽得以高速发展，却也导致产业设计与文化的分裂。</p>
<p>二十世纪后半叶，美国，欧洲，日本，由于历史背景的不同，经济发展轨迹不同，设计在社会中产生的机能也不一样。但有一点是相同的，主要动力来源都是“经济”。</p>
<blockquote>
<p>将某一种素​​材当成优秀的素材，第一步就是将素材无限纯化。</p>
</blockquote>
<p>类似于API的设计，或者类的抽象，如果要让其成为“优秀素材“（便于使用和继承），就要用心的设计，尽可能的简单和清晰，API接口尽可能的少，而且一致性</p>
<h4 id="日常的设计">日常的设计</h4><blockquote>
<p>熟悉的日常生活也蕴含着无数设计的可能，把熟悉的东西当成未知的领域再度开发，也同样具有创造性</p>
<p>从开始平凡的日常生活中不断开发出创意，才是真正的设计</p>
<p>设计已经深深扎根与生活中</p>
</blockquote>
<h4 id="后现代主义">后现代主义</h4><blockquote>
<p>后现代主义设计师走向老化的象征，后现代充满嬉戏色彩的设计，实际可以看成设计师们开的一个优雅玩笑</p>
</blockquote>
<h4 id="信息时代">信息时代</h4><blockquote>
<p>在不安定的社会基础上不断嫁接不安定的技术体系自然容易出现问题</p>
<p>技术的发展已经远远超出我们作为个体对知识的把握能力，一眼望不到尽头，但现在的思想和教育依然在想着如何追赶上技术的步伐。这是很不妥当的一件事情</p>
</blockquote>
<p>设计作为冷静的求道者的一面？</p>
<blockquote>
<p>就像两个整数之间有无数个小数一样，对于一件事情的看法也是无限的。到目前为止，我们还没有完全发现它们。唤醒和激活它们是“增加认识”的方法，也是丰富物和人之间的紧密关系的途径。</p>
</blockquote>
<p>学院</p>
<ul>
<li>包豪斯学院</li>
<li>乌尔姆设计学院</li>
</ul>
<p>人物</p>
<ul>
<li>沃尔特．格罗庇乌斯(Walter Gropius) 包豪斯的第一任校长</li>
<li>汉斯．梅耶(Hannes Meyer) 包豪斯的第二任校长</li>
<li>莫霍利．纳吉 (laszb Moholy-Nagy)</li>
<li>保罗．克利(Paul klee)</li>
<li>密斯．凡德罗(Ludwing Mies Van der Rohe) 包豪斯的第三任校长</li>
<li>理查德．沃尔曼(Richard saul wurman) 建筑师，平面设计师，信息架构(information architecture)术语的创造者，信息易读实践的先驱，TED会议的创立者。</li>
</ul>
<h2 id="信息建筑的思维方式">信息建筑的思维方式</h2><p><code>外部刺激 + 原有记忆 =&gt; 印象</code></p>
<blockquote>
<p>其最终结果是在观者的脑中，形成一幅由多种刺激组合形成的综合形象。享受这些信息的人是各种感觉的集合体。所以设计师应该对这些信息进行组合，有条不絮的构造信息的集合体，然后还给大家，好让大家进行分门别类的接收。</p>
<p>记忆不是简单的再现过去，而是在接收外部信息的同时，依次被一一唤醒，彼此认证，再充实以新的信息，因此，所谓印象，就是通过感觉器官接收外部刺激，并将刺激与脑中原有的记忆组合，联系而生成的行为</p>
</blockquote>
<p>大脑信息构筑活动的形成，需要感觉器官接收外部的信息，还需要记忆中与外部刺激相关的素材。</p>
<blockquote>
<p>书籍作为一种信息的载体，确实有点过时了…<br>但是信息不仅仅需要被大量的保存和高速的移动。我们需要冷静的观察，思考信息和个人之间的关系，以此来研究信息。以这个标准来评价书籍，用有着合适的重量和厚度，并且手感良好的材料来做信息的载体，显然要比储存在一块记忆卡的信息表现方式更能给人带来良好的使用感和满足感</p>
</blockquote>
<p>以物质的形式来传递信息给自己留下了思考的空间.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="设计到底是什么？">设计到底是什么？</h2><h4 id="设计源于生活，应用于生活">设计源于生活，应用于生活</h4><p>机械化生产速度惊人，粗糙的产品大量出现，，那些热爱生活的人们对旧日审美的流逝倍感痛心。机械对传统美感的践踏，是人们不能忍受的。<str]]>
    </summary>
    
      <category term="设计" scheme="http://zhangmhao.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="读书笔记" scheme="http://zhangmhao.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[由橡皮鸭到Code-Review]]></title>
    <link href="http://zhangmhao.github.io/2014/06/02/%E7%94%B1%E6%A9%A1%E7%9A%AE%E9%B8%AD%E5%88%B0Code-Review/"/>
    <id>http://zhangmhao.github.io/2014/06/02/由橡皮鸭到Code-Review/</id>
    <published>2014-06-01T16:00:00.000Z</published>
    <updated>2015-09-22T13:56:22.000Z</updated>
    <content type="html"><![CDATA[<h3 id="小黄鸭测试法（Rubber_Duck_Debugging）">小黄鸭测试法（Rubber Duck Debugging）</h3><blockquote>
<p>小黄鸭调试法，又称橡皮鸭调试法，黄鸭除虫法（Rubber Duck Debugging）是软件工程中使用的调试代码方法之一。就是在程序的调试、纠错或测试过程中，耐心地向小黄鸭解释每一行程序的作用，以此来激发灵感。– wikipedia</p>
</blockquote>
<p>感觉这是一种又可爱又稍微有点精神分裂感的方法！宅们又扩展出：初音调试法等</p>
<h4 id="过程">过程</h4><ol>
<li>找一个橡皮鸭子。你可以去借，去偷，去抢，去买，自己制作……反正你要搞到一个橡皮鸭子。</li>
<li>把这个橡皮鸭子放在你跟前。标准做法是放在你的桌子上，电脑显示器边，或是键盘边，反正是你的跟前，面朝你。</li>
<li>然后，打开你的源代码。不管是电脑里的还是打印出来的。</li>
<li>对着那只橡皮鸭子，把你写下的所有代码，一行一行地，精心地，向这只橡皮鸭子解释清楚。记住，这是解释，你需要解释出你的想法，思路，观点。不然，那只能算是表述，而不是解释。</li>
<li>当你在向这只始终保持沉默的橡皮鸭子解释的过程中，你会发现你的想法，观点，或思路和实际的代码相偏离了，于是你也就找到了代码中的bug。</li>
<li>找到了BUG，一定要记得感谢一下那个橡皮鸭子哦。</li>
</ol>
<p>而code-review就是小黄鸭的进化版，因为将不会说话可爱的小黄鸭变成会反馈的人。</p>
<h3 id="Code_Review">Code Review</h3><p>在<a href="http://coolshell.cn/articles/1302.html" target="_blank" rel="external">Code Review中的几个提示</a>这篇文章中提及到code-review（下面简称为CR）的作用：</p>
<ul>
<li>传递知识，同时方便日后维护代码</li>
<li>确认实际和实现是简单和清楚的</li>
<li>相互学习，相互帮助，增强团队凝聚力</li>
</ul>
<p>之前自己所在的上一个团队里面有队员提出CR的想法，但是得到负面的反馈会更多，大家直觉的回答（不排除有些人有过往的经验）是： </p>
<ul>
<li>太耗时间</li>
<li>怕对其他人造成伤害，比较程序员都是比较自负的</li>
</ul>
<p>如果是小组会议的形式，这个是会比较耗时的，但是可以采取非正式短时间的CR，对于“伤害他人”的这个看法，如果保持一个正面开放的态度，才是有助于自己学习成长的。程序员自负这种简单的论调太过没有说服力了。</p>
<p>而在《Code Review中的几个提示》中提及的几点觉得非常有道理：</p>
<ul>
<li>循序渐进的CR，而不是项目接近完成的时候再进行</li>
<li>CR不需要太正式，要短</li>
<li>积极正面的态度</li>
<li>CR主要不是承担保证代码风格，发现代码错误这样的职责</li>
</ul>
<h3 id="参考">参考</h3><ol>
<li><a href="http://zh.wikipedia.org/wiki/%E5%B0%8F%E9%BB%84%E9%B8%AD%E8%B0%83%E8%AF%95%E6%B3%95" target="_blank" rel="external">wiki/小黄鸭调试法</a></li>
<li><a href="http://coolshell.cn/articles/1218.html" target="_blank" rel="external">简单实用的Code Review工具</a></li>
<li><a href="http://coolshell.cn/articles/1302.html" target="_blank" rel="external">Code Review中的几个提示</a></li>
<li><a href="http://blog.csdn.net/haoel/article/details/4914403" target="_blank" rel="external">橡皮鸭程序调试法</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="小黄鸭测试法（Rubber_Duck_Debugging）">小黄鸭测试法（Rubber Duck Debugging）</h3><blockquote>
<p>小黄鸭调试法，又称橡皮鸭调试法，黄鸭除虫法（Rubber Duck Debugging）是软件工程中使]]>
    </summary>
    
      <category term="测试" scheme="http://zhangmhao.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[什么是浏览器关键时间点？]]></title>
    <link href="http://zhangmhao.github.io/2014/05/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%B3%E9%94%AE%E6%97%B6%E9%97%B4%E7%82%B9/"/>
    <id>http://zhangmhao.github.io/2014/05/20/浏览器关键时间点/</id>
    <published>2014-05-19T16:00:00.000Z</published>
    <updated>2015-09-22T13:55:45.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://www.w3.org/TR/navigation-timing/timing-overview.png" alt="enter image description here"></p>
<p>注明: 图片引用自 <a href="http://www.w3.org/TR/navigation-timing/" target="_blank" rel="external">W3C</a></p>
<h3 id="TTFB(Time_to_First_Byte)">TTFB(Time to First Byte)</h3><p>指从客户端开始和服务端交互到服务端开始向客户端浏览器传输数据的时间（包括DNS、socket连接和请求响应时间），是能够反映服务端响应速度的重要指标 </p>
<p>优化：优化DNS查询，使用CDN，提早Flush，添加周期头等</p>
<h3 id="TTDD(Time_To_Document_Download)">TTDD(Time To Document Download)</h3><p>从服务器加载HTML文档的时间</p>
<h3 id="TTHE(Time_To_Head_End)">TTHE(Time To Head End)</h3><p>HTML文档头部解析完成所需要的时间 </p>
<h3 id="TTSR(Time_To_Start_Render)">TTSR(Time To Start Render)</h3><p>定义：浏览器开始渲染的时间，从用户角度出发则可以定义为用户在页面上看到的第一个内容的时间。 即TTSR越短，用户越早浏览器中的内容，心理上的等待时间会越短。</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Time</span> To <span class="built_in">Start</span> Render: TTSR = TTFB + TTDD + TTHE</span><br></pre></td></tr></table></figure>
<p>其中 <code>TTFB</code>, <code>TTDD</code>,<code>TTHE</code> 在前面提到过了，可以查看前面的介绍；</p>
<p>通过以上公式可以看到<code>TTSR</code>时长主要受以下因素影响， 而且这些因素是开发人员可以控制的，可以通过优化来缩短 <code>TTSR</code> 时长；</p>
<ol>
<li>服务器响应时间</li>
<li>HTML文档的大小</li>
<li>Head中资源使用情况, 是否有脚本阻塞了页面的解析</li>
</ol>
<h3 id="与DOM相关的事件">与DOM相关的事件</h3><p><img src="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/images/dom-navtiming.png" alt="enter image description here"></p>
<blockquote>
<ul>
<li>domLoading：这是整个过程开始的时间戳，浏览器开始解析 HTML 文档第一批收到的字节 document.</li>
<li>domInteractive：标记浏览器完成解析并且所有 HTML 和 DOM 构建完毕的时间点。</li>
<li>domContentLoaded：标记 DOM 准备就绪并且没有样式表阻碍 JavaScript 执行的时间点 - 意味着我们可以开始构建呈现树了。<ul>
<li>很多 JavaScript 框架等待此事件发生后，才开始执行它们自己的逻辑。因此，浏览器会通过捕获 EventStart 和 EventEnd 时间戳，跟踪执行逻辑所需的时间。</li>
</ul>
</li>
<li>domComplete： 顾名思义，所有的处理完成，网页上所有资源（图片等） 下载完成 - 即加载旋转图标停止旋转。</li>
<li>loadEvent：作为每个网页加载的最后一步，浏览器会触发onLoad事件，以便触发附加的应用逻辑。所以onload事件会在 domInteractive、domContentLoaded 和 domComplete 之后触发</li>
</ul>
</blockquote>
<p><code>DomContentLoaded</code> 通常标记 [DOM 和 CSSOM 都准备就绪] 的时间 , 通俗的讲就是：页面解析完成的时间，在高级浏览器里有对应的DOM事件 - <code>DOMContentLoaded</code>，Firefox官方的解析如下：</p>
<blockquote>
<p>Fired at the page’s Document object when parsing of the document is finished. By the time this event fires, the page’s DOM is ready, but the referenced stylesheets, images, and subframesmay not be done loading; use the “load” event to detect a fully-loaded page.</p>
</blockquote>
<p><code>TTSR</code>指标直接决定着用户对页面速度的体验，与此不同，DOM Ready指标并不直接影响感官体验，往往影响的是交互功能何时可用。为何影响的是交互呢？由于<code>DOMContentLoaded</code>事件触发时是所有DOM节点可以进行操作的时候，比如添加事件、增删改节点等，因此用Javascript实现的一些交互功能往往会在DOMContentLoaded事件中去初始化，也只有在<code>DOMContentLoaded</code>事件触发后这项功能才可用。  </p>
<p><img src="https://developer.chrome.com/devtools/docs/network-files/dom-lines.png" alt="enter image description here"></p>
<p>注明：图片来自google developer</p>
<p>这里还要提及的是 <code>DomContentLoaded</code> , <code>DomComplete</code> 这两个时间的差别，网页的Dom内容加载并解析完成时会触发<code>DomContentLoaded</code>，而<code>DomComplete</code>是在网页的资源（css,image等）加载完成后才触发。英文文档原文如下：</p>
<blockquote>
<p> The DOMContentLoaded event is fired when all of the page’s DOM content has been loaded and parsed. The load event is fired once all of the document’s resources (images and CSS files, and so forth) have been fully loaded.</p>
</blockquote>
<h3 id="TTDR_(Time_To_Dom_Ready_)">TTDR (Time To Dom Ready )</h3><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">TTDR </span>=<span class="string"> TTSR + TTDC + TTST</span></span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li><code>TTSR</code>(Time To Start Render)：浏览器开始渲染的时间</li>
<li><code>TTDC</code>(Time To Dom Created)：DOM树创建所耗时间</li>
<li><code>TTST</code>(Time To Script)：BODY中所有脚本加载和执行的时间</li>
</ul>
<p>通过以上公式可以看到Start Render主要受以下因素影响:</p>
<ol>
<li>DOM结构的复杂程度</li>
<li>BODY中脚本运行时间</li>
</ol>
<p>通过对一些实际监控数据的分析得出，在一个通过正常方式加载脚本的页面中，脚本的加载和执行时间往往能占DOM Ready时间的50%左右，由此可见脚本的使用对DOM Ready指标的影响如何的显著！因此，对DOM Ready指标的优化也应该着重从js脚本的使用入手。 </p>
<p>当然，随着硬件性能越来越高，脚本的执行时间对于页面加载速度的影响会越来越少；但是，如果有构建一个60fps的web应用，细节往往是非常重要的</p>
<h3 id="TTI(time_to_interact)">TTI(time to interact)</h3><p>TTI(Time To Interact)指的是页面可交互的时间。页面中的交互包括很多方面，例如点击一个链接、点击一个搜索按钮都属于页面交互的范畴，但是对于衡量性能的TTI则主要指核心功能可以交互的时间。核心功能的定义则是随着页面的不同而不同，例如对于百度首页而言，最为关键的就是搜索框出现的时间、而对于一些购物网站的商品详情页最关键的是购买功能可用和描述出现的时间。而目前的实际情况，TTI大都等于DOM Ready时间，因为不论交互功能是否重要，相关的Javascript都会在DOM Ready后才进行初始化和绑定，而实际上TTI是可以更早的。  </p>
<p>通过TTI的定义可以知道，TTI的长短对于用户体验的影响是十分重要的，它影响着用户对核心功能的使用。</p>
<ol>
<li>Start Render时间 - 只有内容开始渲染了，接下来才有可能提供可交互的界面，因此渲染时间的快与慢会直接影响TTI时间。</li>
<li>核心功能相关HTML元素的显示时间 ， 决定着核心功能对用户可见的时间</li>
<li>提供用户交互的JS脚本什么时候执行完成 ， 决定着核心Javascript功能可交互的时间</li>
</ol>
<p>在HTML5应用中，JS模板引擎的使用是非常普遍的，这个使用得好可以提高TTI时间，使用得不好，会比没有使用模板引擎而是通过后端模板引擎渲染的页面更慢。客户端使用JS模板引擎进行渲染的过程必须知会用户，然用户不至于见到一个空白页面，这个在我之前做过的一个项目，UC视频就是一个很好的反例。</p>
<h3 id="参考：">参考：</h3><ol>
<li><a href="http://www.cnblogs.com/onflying/archive/2013/04/23/3037789.html" target="_blank" rel="external">http://www.cnblogs.com/onflying/archive/2013/04/23/3037789.html</a> </li>
<li><a href="http://www.w3.org/2010/webperf/" target="_blank" rel="external">http://www.w3.org/2010/webperf/</a>  </li>
<li><a href="https://developer.mozilla.org/en-US/docs/Navigation_timing" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Navigation_timing</a> </li>
<li><a href="http://nunumick.me/blog/2011/02/23/web-page-speed-metrics.html" target="_blank" rel="external">http://nunumick.me/blog/2011/02/23/web-page-speed-metrics.html</a>  </li>
<li><a href="http://zh.wikipedia.org/wiki/%E5%B8%A7%E7%8E%87" target="_blank" rel="external">http://zh.wikipedia.org/wiki/%E5%B8%A7%E7%8E%87</a>  </li>
<li><a href="http://addyosmani.com/blog/performance-optimisation-with-timeline-profiles/" target="_blank" rel="external">http://addyosmani.com/blog/performance-optimisation-with-timeline-profiles/</a> </li>
<li><a href="http://blog.chromium.org/2012/11/build-smoother-web-apps-with-chrome.html" target="_blank" rel="external">http://blog.chromium.org/2012/11/build-smoother-web-apps-with-chrome.html</a> </li>
<li><a href="http://www.w3.org/TR/navigation-timing/" target="_blank" rel="external">http://www.w3.org/TR/navigation-timing/</a></li>
<li><a href="https://developer.chrome.com/devtools/docs/network" target="_blank" rel="external">https://developer.chrome.com/devtools/docs/network</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://www.w3.org/TR/navigation-timing/timing-overview.png" alt="enter image description here"></p>
<p>注明: 图片引用自 <a href="http:]]>
    </summary>
    
      <category term="前端性能优化" scheme="http://zhangmhao.github.io/tags/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="前端开发" scheme="http://zhangmhao.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[命令空间与模块加载器的异同]]></title>
    <link href="http://zhangmhao.github.io/2014/05/07/%E5%91%BD%E4%BB%A4%E7%A9%BA%E9%96%93%E8%88%87%E6%A8%A1%E5%A1%8A%E5%8A%A0%E8%BC%89%E5%99%A8%E7%9A%84%E7%95%B0%E5%90%8C/"/>
    <id>http://zhangmhao.github.io/2014/05/07/命令空間與模塊加載器的異同/</id>
    <published>2014-05-06T16:00:00.000Z</published>
    <updated>2015-09-22T13:55:01.000Z</updated>
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>近期接手了一個項目，前端這一塊沒有採用模塊加載器（Seajs或者Requirejs）來進行模塊化，而是僅僅採用命名空間這種形式。由於一開始做前端開發就已經習慣了使用模塊化加載器這種工具來進行模塊化開發，一時間覺得命令空間這種組織代碼的形式就像一條打了很多補丁的褲子，可以穿，但是很丑。所以具體找一找到底丑在哪裡，已經模塊加載器的優勢。</p>
<p>首先找出lifesinger的一篇舊文<a href="https://github.com/seajs/seajs/issues/547" target="_blank" rel="external">「前端模塊化開發的價值」</a>， 其中介紹過這兩種方式的優劣</p>
<blockquote>
<ol>
<li>模块的版本管理。通过别名等配置，配合构建工具，可以比较轻松地实现模块的版本管理。</li>
<li>提高可维护性。模块化可以让每个文件的职责单一，非常有利于代码的维护。Sea.js 还提供了 nocache、debug 等插件，拥有在线调试等功能，能比较明显地提升效率。</li>
<li>前端性能优化。Sea.js 通过异步加载模块，这对页面性能非常有益。Sea.js 还提供了 combo、flush 等插件，配合服务端，可以很好地对页面性能进行调优。</li>
<li>跨环境共享模块。CMD 模块定义规范与 Node.js 的模块规范非常相近。通过 Sea.js 的 Node.js 版本，可以很方便实现模块的跨服务器和浏览器共享。</li>
</ol>
</blockquote>
<p>//Todo</p>
<h3 id="參考">參考</h3><ol>
<li><a href="http://chaoskeh.com/blog/why-seajs.html" target="_blank" rel="external">Why Seajs</a></li>
<li><a href="https://github.com/seajs/seajs/issues/547" target="_blank" rel="external">前端模塊化開發的價值</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="前言">前言</h3><p>近期接手了一個項目，前端這一塊沒有採用模塊加載器（Seajs或者Requirejs）來進行模塊化，而是僅僅採用命名空間這種形式。由於一開始做前端開發就已經習慣了使用模塊化加載器這種工具來進行模塊化開發，一時間覺得命令空間這種組織代碼的形]]>
    </summary>
    
      <category term="模块化" scheme="http://zhangmhao.github.io/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
      <category term="前端开发" scheme="http://zhangmhao.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
